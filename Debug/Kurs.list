
Kurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800236c  0800236c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800238c  0800238c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  080023a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080023a0  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000555f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b2  00000000  00000000  000255de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00026a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000047b  00000000  00000000  000270a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000149f9  00000000  00000000  00027523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007511  00000000  00000000  0003bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080344  00000000  00000000  0004342d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000171c  00000000  00000000  000c3774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c4e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002354 	.word	0x08002354

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002354 	.word	0x08002354

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <MX_GPIO_Init+0xe0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a30      	ldr	r2, [pc, #192]	; (80005b0 <MX_GPIO_Init+0xe0>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <MX_GPIO_Init+0xe0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <MX_GPIO_Init+0xe0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a29      	ldr	r2, [pc, #164]	; (80005b0 <MX_GPIO_Init+0xe0>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <MX_GPIO_Init+0xe0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <MX_GPIO_Init+0xe0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <MX_GPIO_Init+0xe0>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <MX_GPIO_Init+0xe0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <MX_GPIO_Init+0xe0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <MX_GPIO_Init+0xe0>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <MX_GPIO_Init+0xe0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	4816      	ldr	r0, [pc, #88]	; (80005b4 <MX_GPIO_Init+0xe4>)
 800055c:	f000 fcd6 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_P1_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_P1_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <MX_GPIO_Init+0xec>)
 8000576:	f000 fb45 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057a:	2320      	movs	r3, #32
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <MX_GPIO_Init+0xe4>)
 8000592:	f000 fb37 	bl	8000c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	2028      	movs	r0, #40	; 0x28
 800059c:	f000 fafb 	bl	8000b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a0:	2028      	movs	r0, #40	; 0x28
 80005a2:	f000 fb14 	bl	8000bce <HAL_NVIC_EnableIRQ>

}
 80005a6:	bf00      	nop
 80005a8:	3728      	adds	r7, #40	; 0x28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40020000 	.word	0x40020000
 80005b8:	10210000 	.word	0x10210000
 80005bc:	40020800 	.word	0x40020800

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 f99a 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f806 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f7ff ff80 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f8f8 	bl	80007c4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x14>
	...

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fe88 	bl	80022fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd4>)
 8000626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fc9e 	bl	8000fa4 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066e:	f000 f833 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2102      	movs	r1, #2
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fef6 	bl	8001480 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 f81d 	bl	80006d8 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_P1_Pin)
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c0:	d103      	bne.n	80006ca <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006c2:	2120      	movs	r1, #32
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80006c6:	f000 fc3a 	bl	8000f3e <HAL_GPIO_TogglePin>
	}
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020000 	.word	0x40020000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_MspInit+0x4c>)
 80006f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_MspInit+0x4c>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000722:	2007      	movs	r0, #7
 8000724:	f000 fa2c 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f000 f90e 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_P1_Pin);
 800078c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000790:	f000 fbf0 	bl	8000f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SystemInit+0x28>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <SystemInit+0x28>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SystemInit+0x28>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b2:	609a      	str	r2, [r3, #8]
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART2_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007fc:	f001 f860 	bl	80018c0 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f7ff ff67 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000028 	.word	0x20000028
 8000814:	40004400 	.word	0x40004400

08000818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <HAL_UART_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_UART_MspInit+0x88>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <HAL_UART_MspInit+0x88>)
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_UART_MspInit+0x88>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_UART_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_UART_MspInit+0x88>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_UART_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000872:	230c      	movs	r3, #12
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000882:	2307      	movs	r3, #7
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <HAL_UART_MspInit+0x8c>)
 800088e:	f000 f9b9 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40004400 	.word	0x40004400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008ae:	e003      	b.n	80008b8 <LoopCopyDataInit>

080008b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008b6:	3104      	adds	r1, #4

080008b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008c0:	d3f6      	bcc.n	80008b0 <CopyDataInit>
  ldr  r2, =_sbss
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008c4:	e002      	b.n	80008cc <LoopFillZerobss>

080008c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008c8:	f842 3b04 	str.w	r3, [r2], #4

080008cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008d0:	d3f9      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008d2:	f7ff ff61 	bl	8000798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d6:	f001 fd19 	bl	800230c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008da:	f7ff fe71 	bl	80005c0 <main>
  bx  lr    
 80008de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008e0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80008e4:	08002394 	.word	0x08002394
  ldr  r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008ec:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80008f0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80008f4:	2000006c 	.word	0x2000006c

080008f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC_IRQHandler>
	...

080008fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_Init+0x40>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_Init+0x40>)
 8000912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_Init+0x40>)
 800091e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f92b 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f808 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff fed8 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023c00 	.word	0x40023c00

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f943 	bl	8000bea <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 f90b 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000068 	.word	0x20000068

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000068 	.word	0x20000068

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff29 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff3e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff8e 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff31 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa2 	bl	8000b3c <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	e159      	b.n	8000ed4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c20:	2201      	movs	r2, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 8148 	bne.w	8000ece <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d00b      	beq.n	8000c5e <HAL_GPIO_Init+0x5a>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d007      	beq.n	8000c5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c52:	2b11      	cmp	r3, #17
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d130      	bne.n	8000cc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	f003 0201 	and.w	r2, r3, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0xfc>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b12      	cmp	r3, #18
 8000cfe:	d123      	bne.n	8000d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3208      	adds	r2, #8
 8000d42:	69b9      	ldr	r1, [r7, #24]
 8000d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0203 	and.w	r2, r3, #3
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 80a2 	beq.w	8000ece <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b57      	ldr	r3, [pc, #348]	; (8000eec <HAL_GPIO_Init+0x2e8>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a56      	ldr	r2, [pc, #344]	; (8000eec <HAL_GPIO_Init+0x2e8>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b54      	ldr	r3, [pc, #336]	; (8000eec <HAL_GPIO_Init+0x2e8>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da6:	4a52      	ldr	r2, [pc, #328]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a49      	ldr	r2, [pc, #292]	; (8000ef4 <HAL_GPIO_Init+0x2f0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d019      	beq.n	8000e06 <HAL_GPIO_Init+0x202>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2f4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0x1fe>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a47      	ldr	r2, [pc, #284]	; (8000efc <HAL_GPIO_Init+0x2f8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <HAL_GPIO_Init+0x2fc>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x1f6>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_GPIO_Init+0x300>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_Init+0x1f2>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e008      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e004      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x204>
 8000e06:	2300      	movs	r3, #0
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	f002 0203 	and.w	r2, r2, #3
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4093      	lsls	r3, r2
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e18:	4935      	ldr	r1, [pc, #212]	; (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e26:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4a:	4a2f      	ldr	r2, [pc, #188]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e74:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	f67f aea2 	bls.w	8000c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	401a      	ands	r2, r3
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d104      	bne.n	8000f62 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	041a      	lsls	r2, r3, #16
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb8c 	bl	80006b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e25e      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d075      	beq.n	80010ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc2:	4b88      	ldr	r3, [pc, #544]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d00c      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fce:	4b85      	ldr	r3, [pc, #532]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d112      	bne.n	8001000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fda:	4b82      	ldr	r3, [pc, #520]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fe6:	d10b      	bne.n	8001000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	4b7e      	ldr	r3, [pc, #504]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d05b      	beq.n	80010ac <HAL_RCC_OscConfig+0x108>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d157      	bne.n	80010ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e239      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d106      	bne.n	8001018 <HAL_RCC_OscConfig+0x74>
 800100a:	4b76      	ldr	r3, [pc, #472]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a75      	ldr	r2, [pc, #468]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e01d      	b.n	8001054 <HAL_RCC_OscConfig+0xb0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x98>
 8001022:	4b70      	ldr	r3, [pc, #448]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6f      	ldr	r2, [pc, #444]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b6d      	ldr	r3, [pc, #436]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a6c      	ldr	r2, [pc, #432]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e00b      	b.n	8001054 <HAL_RCC_OscConfig+0xb0>
 800103c:	4b69      	ldr	r3, [pc, #420]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a68      	ldr	r2, [pc, #416]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a65      	ldr	r2, [pc, #404]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d013      	beq.n	8001084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fcb4 	bl	80009c8 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fcb0 	bl	80009c8 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1fe      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0xc0>
 8001082:	e014      	b.n	80010ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fca0 	bl	80009c8 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fc9c 	bl	80009c8 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e1ea      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	4b51      	ldr	r3, [pc, #324]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0xe8>
 80010aa:	e000      	b.n	80010ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d063      	beq.n	8001182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ba:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00b      	beq.n	80010de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d11c      	bne.n	800110c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d2:	4b44      	ldr	r3, [pc, #272]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d116      	bne.n	800110c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <HAL_RCC_OscConfig+0x152>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e1be      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4937      	ldr	r1, [pc, #220]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110a:	e03a      	b.n	8001182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_RCC_OscConfig+0x244>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111a:	f7ff fc55 	bl	80009c8 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fc51 	bl	80009c8 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e19f      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4925      	ldr	r1, [pc, #148]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
 8001154:	e015      	b.n	8001182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x244>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fc34 	bl	80009c8 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fc30 	bl	80009c8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e17e      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d036      	beq.n	80011fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d016      	beq.n	80011c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_RCC_OscConfig+0x248>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff fc14 	bl	80009c8 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc10 	bl	80009c8 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e15e      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80011b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x200>
 80011c2:	e01b      	b.n	80011fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_RCC_OscConfig+0x248>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fbfd 	bl	80009c8 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	e00e      	b.n	80011f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fbf9 	bl	80009c8 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d907      	bls.n	80011f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e147      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
 80011e4:	40023800 	.word	0x40023800
 80011e8:	42470000 	.word	0x42470000
 80011ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ea      	bne.n	80011d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 8097 	beq.w	8001338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120e:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a7c      	ldr	r2, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b77      	ldr	r3, [pc, #476]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d118      	bne.n	8001278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001246:	4b74      	ldr	r3, [pc, #464]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a73      	ldr	r2, [pc, #460]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001252:	f7ff fbb9 	bl	80009c8 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125a:	f7ff fbb5 	bl	80009c8 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e103      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x2ea>
 8001280:	4b64      	ldr	r3, [pc, #400]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	4a63      	ldr	r2, [pc, #396]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6713      	str	r3, [r2, #112]	; 0x70
 800128c:	e01c      	b.n	80012c8 <HAL_RCC_OscConfig+0x324>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x30c>
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129a:	4a5e      	ldr	r2, [pc, #376]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6713      	str	r3, [r2, #112]	; 0x70
 80012a2:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a5b      	ldr	r2, [pc, #364]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0x324>
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6713      	str	r3, [r2, #112]	; 0x70
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c0:	4a54      	ldr	r2, [pc, #336]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012c2:	f023 0304 	bic.w	r3, r3, #4
 80012c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d015      	beq.n	80012fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fb7a 	bl	80009c8 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d6:	e00a      	b.n	80012ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	f7ff fb76 	bl	80009c8 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e0c2      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0ee      	beq.n	80012d8 <HAL_RCC_OscConfig+0x334>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fb64 	bl	80009c8 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff fb60 	bl	80009c8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e0ac      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ee      	bne.n	8001304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132c:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a38      	ldr	r2, [pc, #224]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8098 	beq.w	8001472 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	d05c      	beq.n	8001408 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d141      	bne.n	80013da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_RCC_OscConfig+0x478>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fb34 	bl	80009c8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fb30 	bl	80009c8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e07e      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	019b      	lsls	r3, r3, #6
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	3b01      	subs	r3, #1
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	061b      	lsls	r3, r3, #24
 80013a6:	491b      	ldr	r1, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x478>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb09 	bl	80009c8 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fb05 	bl	80009c8 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e053      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x416>
 80013d8:	e04b      	b.n	8001472 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_RCC_OscConfig+0x478>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff faf2 	bl	80009c8 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff faee 	bl	80009c8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e03c      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x444>
 8001406:	e034      	b.n	8001472 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e02f      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000
 800141c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_RCC_OscConfig+0x4d8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	429a      	cmp	r2, r3
 8001432:	d11c      	bne.n	800146e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d115      	bne.n	800146e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001448:	4013      	ands	r3, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800144e:	4293      	cmp	r3, r2
 8001450:	d10d      	bne.n	800146e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0cc      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d90c      	bls.n	80014bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b65      	ldr	r3, [pc, #404]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0b8      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a58      	ldr	r2, [pc, #352]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	494d      	ldr	r1, [pc, #308]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d044      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d119      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e07f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d003      	beq.n	800153e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153a:	2b03      	cmp	r3, #3
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e06f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e067      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f023 0203 	bic.w	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4934      	ldr	r1, [pc, #208]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff fa2a 	bl	80009c8 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	e00a      	b.n	800158e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff fa26 	bl	80009c8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e04f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 020c 	and.w	r2, r3, #12
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	429a      	cmp	r2, r3
 800159e:	d1eb      	bne.n	8001578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d20c      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e032      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4916      	ldr	r1, [pc, #88]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001606:	f000 f821 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800160a:	4602      	mov	r2, r0
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	490a      	ldr	r1, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1c8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f98a 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00
 800163c:	40023800 	.word	0x40023800
 8001640:	0800236c 	.word	0x0800236c
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001650:	b094      	sub	sp, #80	; 0x50
 8001652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
 8001658:	2300      	movs	r3, #0
 800165a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800165c:	2300      	movs	r3, #0
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001664:	4b79      	ldr	r3, [pc, #484]	; (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d00d      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x40>
 8001670:	2b08      	cmp	r3, #8
 8001672:	f200 80e1 	bhi.w	8001838 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x34>
 800167a:	2b04      	cmp	r3, #4
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x3a>
 800167e:	e0db      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_GetSysClockFreq+0x204>)
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001684:	e0db      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001686:	4b73      	ldr	r3, [pc, #460]	; (8001854 <HAL_RCC_GetSysClockFreq+0x208>)
 8001688:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800168a:	e0d8      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a2:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	2200      	movs	r2, #0
 80016aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80016ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
 80016b6:	2300      	movs	r3, #0
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
 80016ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016be:	4622      	mov	r2, r4
 80016c0:	462b      	mov	r3, r5
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	0159      	lsls	r1, r3, #5
 80016cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d0:	0150      	lsls	r0, r2, #5
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4621      	mov	r1, r4
 80016d8:	1a51      	subs	r1, r2, r1
 80016da:	6139      	str	r1, [r7, #16]
 80016dc:	4629      	mov	r1, r5
 80016de:	eb63 0301 	sbc.w	r3, r3, r1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016f0:	4659      	mov	r1, fp
 80016f2:	018b      	lsls	r3, r1, #6
 80016f4:	4651      	mov	r1, sl
 80016f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016fa:	4651      	mov	r1, sl
 80016fc:	018a      	lsls	r2, r1, #6
 80016fe:	4651      	mov	r1, sl
 8001700:	ebb2 0801 	subs.w	r8, r2, r1
 8001704:	4659      	mov	r1, fp
 8001706:	eb63 0901 	sbc.w	r9, r3, r1
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800171a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800171e:	4690      	mov	r8, r2
 8001720:	4699      	mov	r9, r3
 8001722:	4623      	mov	r3, r4
 8001724:	eb18 0303 	adds.w	r3, r8, r3
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	462b      	mov	r3, r5
 800172c:	eb49 0303 	adc.w	r3, r9, r3
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800173e:	4629      	mov	r1, r5
 8001740:	024b      	lsls	r3, r1, #9
 8001742:	4621      	mov	r1, r4
 8001744:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001748:	4621      	mov	r1, r4
 800174a:	024a      	lsls	r2, r1, #9
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001752:	2200      	movs	r2, #0
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
 8001756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800175c:	f7fe fd3a 	bl	80001d4 <__aeabi_uldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4613      	mov	r3, r2
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001768:	e058      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	2200      	movs	r2, #0
 8001772:	4618      	mov	r0, r3
 8001774:	4611      	mov	r1, r2
 8001776:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
 8001780:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001784:	4642      	mov	r2, r8
 8001786:	464b      	mov	r3, r9
 8001788:	f04f 0000 	mov.w	r0, #0
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	0159      	lsls	r1, r3, #5
 8001792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001796:	0150      	lsls	r0, r2, #5
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4641      	mov	r1, r8
 800179e:	ebb2 0a01 	subs.w	sl, r2, r1
 80017a2:	4649      	mov	r1, r9
 80017a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017bc:	ebb2 040a 	subs.w	r4, r2, sl
 80017c0:	eb63 050b 	sbc.w	r5, r3, fp
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	00eb      	lsls	r3, r5, #3
 80017ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d2:	00e2      	lsls	r2, r4, #3
 80017d4:	4614      	mov	r4, r2
 80017d6:	461d      	mov	r5, r3
 80017d8:	4643      	mov	r3, r8
 80017da:	18e3      	adds	r3, r4, r3
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	464b      	mov	r3, r9
 80017e0:	eb45 0303 	adc.w	r3, r5, r3
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017f2:	4629      	mov	r1, r5
 80017f4:	028b      	lsls	r3, r1, #10
 80017f6:	4621      	mov	r1, r4
 80017f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017fc:	4621      	mov	r1, r4
 80017fe:	028a      	lsls	r2, r1, #10
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001806:	2200      	movs	r2, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	61fa      	str	r2, [r7, #28]
 800180c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001810:	f7fe fce0 	bl	80001d4 <__aeabi_uldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4613      	mov	r3, r2
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_GetSysClockFreq+0x200>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	3301      	adds	r3, #1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800182c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800182e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetSysClockFreq+0x204>)
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800183c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001840:	4618      	mov	r0, r3
 8001842:	3750      	adds	r7, #80	; 0x50
 8001844:	46bd      	mov	sp, r7
 8001846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	00f42400 	.word	0x00f42400
 8001854:	007a1200 	.word	0x007a1200

08001858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCC_GetHCLKFreq+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001874:	f7ff fff0 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	0a9b      	lsrs	r3, r3, #10
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	4903      	ldr	r1, [pc, #12]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	0800237c 	.word	0x0800237c

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800189c:	f7ff ffdc 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0b5b      	lsrs	r3, r3, #13
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4903      	ldr	r1, [pc, #12]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	0800237c 	.word	0x0800237c

080018c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e03f      	b.n	8001952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7fe ff96 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f829 	bl	800195c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800195c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001960:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001964:	af00      	add	r7, sp, #0
 8001966:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800196a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001976:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800197a:	68d9      	ldr	r1, [r3, #12]
 800197c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	ea40 0301 	orr.w	r3, r0, r1
 8001986:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001988:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	431a      	orrs	r2, r3
 8001996:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	431a      	orrs	r2, r3
 800199e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80019aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80019b6:	f021 010c 	bic.w	r1, r1, #12
 80019ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80019c4:	430b      	orrs	r3, r1
 80019c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80019d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019d8:	6999      	ldr	r1, [r3, #24]
 80019da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	ea40 0301 	orr.w	r3, r0, r1
 80019e4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f0:	f040 824a 	bne.w	8001e88 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b96      	ldr	r3, [pc, #600]	; (8001c54 <UART_SetConfig+0x2f8>)
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d006      	beq.n	8001a0e <UART_SetConfig+0xb2>
 8001a00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b94      	ldr	r3, [pc, #592]	; (8001c58 <UART_SetConfig+0x2fc>)
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8129 	bne.w	8001c60 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a0e:	f7ff ff43 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 8001a12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001a20:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8001a24:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8001a28:	4622      	mov	r2, r4
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	1891      	adds	r1, r2, r2
 8001a2e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001a32:	415b      	adcs	r3, r3
 8001a34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a38:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	1851      	adds	r1, r2, r1
 8001a40:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001a44:	4629      	mov	r1, r5
 8001a46:	414b      	adcs	r3, r1
 8001a48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001a58:	4649      	mov	r1, r9
 8001a5a:	00cb      	lsls	r3, r1, #3
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a62:	4641      	mov	r1, r8
 8001a64:	00ca      	lsls	r2, r1, #3
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	189b      	adds	r3, r3, r2
 8001a70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001a74:	462b      	mov	r3, r5
 8001a76:	460a      	mov	r2, r1
 8001a78:	eb42 0303 	adc.w	r3, r2, r3
 8001a7c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001a80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a8c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001a90:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8001a94:	460b      	mov	r3, r1
 8001a96:	18db      	adds	r3, r3, r3
 8001a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	eb42 0303 	adc.w	r3, r2, r3
 8001aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001aa6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001aaa:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001aae:	f7fe fb91 	bl	80001d4 <__aeabi_uldivmod>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <UART_SetConfig+0x300>)
 8001ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	011c      	lsls	r4, r3, #4
 8001ac0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001aca:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001ace:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	464b      	mov	r3, r9
 8001ad6:	1891      	adds	r1, r2, r2
 8001ad8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001adc:	415b      	adcs	r3, r3
 8001ade:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ae2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	1851      	adds	r1, r2, r1
 8001aea:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001aee:	4649      	mov	r1, r9
 8001af0:	414b      	adcs	r3, r1
 8001af2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8001b02:	4659      	mov	r1, fp
 8001b04:	00cb      	lsls	r3, r1, #3
 8001b06:	4651      	mov	r1, sl
 8001b08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	00ca      	lsls	r2, r1, #3
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	4603      	mov	r3, r0
 8001b16:	4642      	mov	r2, r8
 8001b18:	189b      	adds	r3, r3, r2
 8001b1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001b1e:	464b      	mov	r3, r9
 8001b20:	460a      	mov	r2, r1
 8001b22:	eb42 0303 	adc.w	r3, r2, r3
 8001b26:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001b2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001b36:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8001b3a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8001b3e:	460b      	mov	r3, r1
 8001b40:	18db      	adds	r3, r3, r3
 8001b42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b46:	4613      	mov	r3, r2
 8001b48:	eb42 0303 	adc.w	r3, r2, r3
 8001b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b50:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001b54:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8001b58:	f7fe fb3c 	bl	80001d4 <__aeabi_uldivmod>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4611      	mov	r1, r2
 8001b62:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <UART_SetConfig+0x300>)
 8001b64:	fba3 2301 	umull	r2, r3, r3, r1
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	2264      	movs	r2, #100	; 0x64
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	1acb      	subs	r3, r1, r3
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <UART_SetConfig+0x300>)
 8001b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b86:	441c      	add	r4, r3
 8001b88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b92:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8001b96:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	1891      	adds	r1, r2, r2
 8001ba0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001ba4:	415b      	adcs	r3, r3
 8001ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001baa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001bae:	4641      	mov	r1, r8
 8001bb0:	1851      	adds	r1, r2, r1
 8001bb2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	414b      	adcs	r3, r1
 8001bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8001bca:	4659      	mov	r1, fp
 8001bcc:	00cb      	lsls	r3, r1, #3
 8001bce:	4651      	mov	r1, sl
 8001bd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	00ca      	lsls	r2, r1, #3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4642      	mov	r2, r8
 8001be0:	189b      	adds	r3, r3, r2
 8001be2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001be6:	464b      	mov	r3, r9
 8001be8:	460a      	mov	r2, r1
 8001bea:	eb42 0303 	adc.w	r3, r2, r3
 8001bee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bf2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001bfe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001c02:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8001c06:	460b      	mov	r3, r1
 8001c08:	18db      	adds	r3, r3, r3
 8001c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c0e:	4613      	mov	r3, r2
 8001c10:	eb42 0303 	adc.w	r3, r2, r3
 8001c14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c18:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001c1c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001c20:	f7fe fad8 	bl	80001d4 <__aeabi_uldivmod>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <UART_SetConfig+0x300>)
 8001c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2164      	movs	r1, #100	; 0x64
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	3332      	adds	r3, #50	; 0x32
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <UART_SetConfig+0x300>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	f003 0207 	and.w	r2, r3, #7
 8001c48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4422      	add	r2, r4
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	e34a      	b.n	80022ea <UART_SetConfig+0x98e>
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40011400 	.word	0x40011400
 8001c5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c60:	f7ff fe06 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 8001c64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001c72:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001c76:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	1891      	adds	r1, r2, r2
 8001c80:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001c84:	415b      	adcs	r3, r3
 8001c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c8a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c8e:	4621      	mov	r1, r4
 8001c90:	eb12 0a01 	adds.w	sl, r2, r1
 8001c94:	4629      	mov	r1, r5
 8001c96:	eb43 0b01 	adc.w	fp, r3, r1
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ca6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cae:	4692      	mov	sl, r2
 8001cb0:	469b      	mov	fp, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	eb1a 0303 	adds.w	r3, sl, r3
 8001cb8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	eb4b 0303 	adc.w	r3, fp, r3
 8001cc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001cd2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001cd6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8001cda:	460b      	mov	r3, r1
 8001cdc:	18db      	adds	r3, r3, r3
 8001cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	eb42 0303 	adc.w	r3, r2, r3
 8001ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001cec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001cf0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001cf4:	f7fe fa6e 	bl	80001d4 <__aeabi_uldivmod>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <UART_SetConfig+0x528>)
 8001cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	011c      	lsls	r4, r3, #4
 8001d06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001d10:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001d14:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8001d18:	4642      	mov	r2, r8
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	1891      	adds	r1, r2, r2
 8001d1e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001d20:	415b      	adcs	r3, r3
 8001d22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d24:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d28:	4641      	mov	r1, r8
 8001d2a:	1851      	adds	r1, r2, r1
 8001d2c:	6739      	str	r1, [r7, #112]	; 0x70
 8001d2e:	4649      	mov	r1, r9
 8001d30:	414b      	adcs	r3, r1
 8001d32:	677b      	str	r3, [r7, #116]	; 0x74
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8001d40:	4659      	mov	r1, fp
 8001d42:	00cb      	lsls	r3, r1, #3
 8001d44:	4651      	mov	r1, sl
 8001d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	00ca      	lsls	r2, r1, #3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	4642      	mov	r2, r8
 8001d56:	189b      	adds	r3, r3, r2
 8001d58:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001d5c:	464b      	mov	r3, r9
 8001d5e:	460a      	mov	r2, r1
 8001d60:	eb42 0303 	adc.w	r3, r2, r3
 8001d64:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001d68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d74:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001d78:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	18db      	adds	r3, r3, r3
 8001d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d82:	4613      	mov	r3, r2
 8001d84:	eb42 0303 	adc.w	r3, r2, r3
 8001d88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d8e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001d92:	f7fe fa1f 	bl	80001d4 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <UART_SetConfig+0x528>)
 8001d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2264      	movs	r2, #100	; 0x64
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	1acb      	subs	r3, r1, r3
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <UART_SetConfig+0x528>)
 8001db4:	fba3 2302 	umull	r2, r3, r3, r2
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dc0:	441c      	add	r4, r3
 8001dc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001dcc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001dd0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8001dd4:	4642      	mov	r2, r8
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	1891      	adds	r1, r2, r2
 8001dda:	6639      	str	r1, [r7, #96]	; 0x60
 8001ddc:	415b      	adcs	r3, r3
 8001dde:	667b      	str	r3, [r7, #100]	; 0x64
 8001de0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001de4:	4641      	mov	r1, r8
 8001de6:	1851      	adds	r1, r2, r1
 8001de8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001dea:	4649      	mov	r1, r9
 8001dec:	414b      	adcs	r3, r1
 8001dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001dfc:	4659      	mov	r1, fp
 8001dfe:	00cb      	lsls	r3, r1, #3
 8001e00:	4651      	mov	r1, sl
 8001e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e06:	4651      	mov	r1, sl
 8001e08:	00ca      	lsls	r2, r1, #3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4642      	mov	r2, r8
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001e18:	464b      	mov	r3, r9
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	eb42 0303 	adc.w	r3, r2, r3
 8001e20:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001e30:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001e34:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001e38:	460b      	mov	r3, r1
 8001e3a:	18db      	adds	r3, r3, r3
 8001e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8001e3e:	4613      	mov	r3, r2
 8001e40:	eb42 0303 	adc.w	r3, r2, r3
 8001e44:	657b      	str	r3, [r7, #84]	; 0x54
 8001e46:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e4a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001e4e:	f7fe f9c1 	bl	80001d4 <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <UART_SetConfig+0x528>)
 8001e58:	fba3 1302 	umull	r1, r3, r3, r2
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	2164      	movs	r1, #100	; 0x64
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	3332      	adds	r3, #50	; 0x32
 8001e6a:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <UART_SetConfig+0x528>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	f003 0207 	and.w	r2, r3, #7
 8001e76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4422      	add	r2, r4
 8001e7e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001e80:	e233      	b.n	80022ea <UART_SetConfig+0x98e>
 8001e82:	bf00      	nop
 8001e84:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b8d      	ldr	r3, [pc, #564]	; (80020c4 <UART_SetConfig+0x768>)
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d006      	beq.n	8001ea2 <UART_SetConfig+0x546>
 8001e94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <UART_SetConfig+0x76c>)
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 8117 	bne.w	80020d0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ea2:	f7ff fcf9 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 8001ea6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001eb4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001eb8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001ebc:	4622      	mov	r2, r4
 8001ebe:	462b      	mov	r3, r5
 8001ec0:	1891      	adds	r1, r2, r2
 8001ec2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ec4:	415b      	adcs	r3, r3
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ecc:	4621      	mov	r1, r4
 8001ece:	eb12 0801 	adds.w	r8, r2, r1
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	eb43 0901 	adc.w	r9, r3, r1
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eec:	4690      	mov	r8, r2
 8001eee:	4699      	mov	r9, r3
 8001ef0:	4623      	mov	r3, r4
 8001ef2:	eb18 0303 	adds.w	r3, r8, r3
 8001ef6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001efa:	462b      	mov	r3, r5
 8001efc:	eb49 0303 	adc.w	r3, r9, r3
 8001f00:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001f04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f10:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001f20:	4629      	mov	r1, r5
 8001f22:	008b      	lsls	r3, r1, #2
 8001f24:	4621      	mov	r1, r4
 8001f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	008a      	lsls	r2, r1, #2
 8001f2e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001f32:	f7fe f94f 	bl	80001d4 <__aeabi_uldivmod>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4b64      	ldr	r3, [pc, #400]	; (80020cc <UART_SetConfig+0x770>)
 8001f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	011c      	lsls	r4, r3, #4
 8001f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001f4e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f52:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8001f56:	4642      	mov	r2, r8
 8001f58:	464b      	mov	r3, r9
 8001f5a:	1891      	adds	r1, r2, r2
 8001f5c:	6439      	str	r1, [r7, #64]	; 0x40
 8001f5e:	415b      	adcs	r3, r3
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f66:	4641      	mov	r1, r8
 8001f68:	1851      	adds	r1, r2, r1
 8001f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	414b      	adcs	r3, r1
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001f7e:	4659      	mov	r1, fp
 8001f80:	00cb      	lsls	r3, r1, #3
 8001f82:	4651      	mov	r1, sl
 8001f84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f88:	4651      	mov	r1, sl
 8001f8a:	00ca      	lsls	r2, r1, #3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4603      	mov	r3, r0
 8001f92:	4642      	mov	r2, r8
 8001f94:	189b      	adds	r3, r3, r2
 8001f96:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	eb42 0303 	adc.w	r3, r2, r3
 8001fa2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001fa6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001fb2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001fc2:	4649      	mov	r1, r9
 8001fc4:	008b      	lsls	r3, r1, #2
 8001fc6:	4641      	mov	r1, r8
 8001fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fcc:	4641      	mov	r1, r8
 8001fce:	008a      	lsls	r2, r1, #2
 8001fd0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001fd4:	f7fe f8fe 	bl	80001d4 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <UART_SetConfig+0x770>)
 8001fe0:	fba3 2301 	umull	r2, r3, r3, r1
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	2264      	movs	r2, #100	; 0x64
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	1acb      	subs	r3, r1, r3
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	3332      	adds	r3, #50	; 0x32
 8001ff2:	4a36      	ldr	r2, [pc, #216]	; (80020cc <UART_SetConfig+0x770>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	441c      	add	r4, r3
 8002000:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002004:	2200      	movs	r2, #0
 8002006:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800200a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800200e:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8002012:	4642      	mov	r2, r8
 8002014:	464b      	mov	r3, r9
 8002016:	1891      	adds	r1, r2, r2
 8002018:	6339      	str	r1, [r7, #48]	; 0x30
 800201a:	415b      	adcs	r3, r3
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
 800201e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002022:	4641      	mov	r1, r8
 8002024:	1851      	adds	r1, r2, r1
 8002026:	62b9      	str	r1, [r7, #40]	; 0x28
 8002028:	4649      	mov	r1, r9
 800202a:	414b      	adcs	r3, r1
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800203a:	4659      	mov	r1, fp
 800203c:	00cb      	lsls	r3, r1, #3
 800203e:	4651      	mov	r1, sl
 8002040:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002044:	4651      	mov	r1, sl
 8002046:	00ca      	lsls	r2, r1, #3
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	4603      	mov	r3, r0
 800204e:	4642      	mov	r2, r8
 8002050:	189b      	adds	r3, r3, r2
 8002052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002056:	464b      	mov	r3, r9
 8002058:	460a      	mov	r2, r1
 800205a:	eb42 0303 	adc.w	r3, r2, r3
 800205e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002062:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800206e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800207e:	4649      	mov	r1, r9
 8002080:	008b      	lsls	r3, r1, #2
 8002082:	4641      	mov	r1, r8
 8002084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002088:	4641      	mov	r1, r8
 800208a:	008a      	lsls	r2, r1, #2
 800208c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002090:	f7fe f8a0 	bl	80001d4 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <UART_SetConfig+0x770>)
 800209a:	fba3 1302 	umull	r1, r3, r3, r2
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2164      	movs	r1, #100	; 0x64
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	3332      	adds	r3, #50	; 0x32
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <UART_SetConfig+0x770>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	f003 020f 	and.w	r2, r3, #15
 80020b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4422      	add	r2, r4
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	e112      	b.n	80022ea <UART_SetConfig+0x98e>
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40011400 	.word	0x40011400
 80020cc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80020d0:	f7ff fbce 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 80020d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020dc:	2200      	movs	r2, #0
 80020de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80020e2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80020e6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80020ea:	4642      	mov	r2, r8
 80020ec:	464b      	mov	r3, r9
 80020ee:	1891      	adds	r1, r2, r2
 80020f0:	6239      	str	r1, [r7, #32]
 80020f2:	415b      	adcs	r3, r3
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020fa:	4641      	mov	r1, r8
 80020fc:	1854      	adds	r4, r2, r1
 80020fe:	4649      	mov	r1, r9
 8002100:	eb43 0501 	adc.w	r5, r3, r1
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	00eb      	lsls	r3, r5, #3
 800210e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002112:	00e2      	lsls	r2, r4, #3
 8002114:	4614      	mov	r4, r2
 8002116:	461d      	mov	r5, r3
 8002118:	4643      	mov	r3, r8
 800211a:	18e3      	adds	r3, r4, r3
 800211c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002120:	464b      	mov	r3, r9
 8002122:	eb45 0303 	adc.w	r3, r5, r3
 8002126:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800212a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002136:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002146:	4629      	mov	r1, r5
 8002148:	008b      	lsls	r3, r1, #2
 800214a:	4621      	mov	r1, r4
 800214c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002150:	4621      	mov	r1, r4
 8002152:	008a      	lsls	r2, r1, #2
 8002154:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002158:	f7fe f83c 	bl	80001d4 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <UART_SetConfig+0x99c>)
 8002162:	fba3 2302 	umull	r2, r3, r3, r2
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	011c      	lsls	r4, r3, #4
 800216a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002174:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002178:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800217c:	4642      	mov	r2, r8
 800217e:	464b      	mov	r3, r9
 8002180:	1891      	adds	r1, r2, r2
 8002182:	61b9      	str	r1, [r7, #24]
 8002184:	415b      	adcs	r3, r3
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218c:	4641      	mov	r1, r8
 800218e:	1851      	adds	r1, r2, r1
 8002190:	6139      	str	r1, [r7, #16]
 8002192:	4649      	mov	r1, r9
 8002194:	414b      	adcs	r3, r1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021a4:	4659      	mov	r1, fp
 80021a6:	00cb      	lsls	r3, r1, #3
 80021a8:	4651      	mov	r1, sl
 80021aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ae:	4651      	mov	r1, sl
 80021b0:	00ca      	lsls	r2, r1, #3
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	4642      	mov	r2, r8
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80021c0:	464b      	mov	r3, r9
 80021c2:	460a      	mov	r2, r1
 80021c4:	eb42 0303 	adc.w	r3, r2, r3
 80021c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80021cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80021d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80021e8:	4649      	mov	r1, r9
 80021ea:	008b      	lsls	r3, r1, #2
 80021ec:	4641      	mov	r1, r8
 80021ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021f2:	4641      	mov	r1, r8
 80021f4:	008a      	lsls	r2, r1, #2
 80021f6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80021fa:	f7fd ffeb 	bl	80001d4 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4611      	mov	r1, r2
 8002204:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <UART_SetConfig+0x99c>)
 8002206:	fba3 2301 	umull	r2, r3, r3, r1
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2264      	movs	r2, #100	; 0x64
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	1acb      	subs	r3, r1, r3
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	3332      	adds	r3, #50	; 0x32
 8002218:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <UART_SetConfig+0x99c>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002224:	441c      	add	r4, r3
 8002226:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800222a:	2200      	movs	r2, #0
 800222c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002230:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002234:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002238:	4642      	mov	r2, r8
 800223a:	464b      	mov	r3, r9
 800223c:	1891      	adds	r1, r2, r2
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	415b      	adcs	r3, r3
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002248:	4641      	mov	r1, r8
 800224a:	1851      	adds	r1, r2, r1
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	4649      	mov	r1, r9
 8002250:	414b      	adcs	r3, r1
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002260:	4659      	mov	r1, fp
 8002262:	00cb      	lsls	r3, r1, #3
 8002264:	4651      	mov	r1, sl
 8002266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800226a:	4651      	mov	r1, sl
 800226c:	00ca      	lsls	r2, r1, #3
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	4603      	mov	r3, r0
 8002274:	4642      	mov	r2, r8
 8002276:	189b      	adds	r3, r3, r2
 8002278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800227c:	464b      	mov	r3, r9
 800227e:	460a      	mov	r2, r1
 8002280:	eb42 0303 	adc.w	r3, r2, r3
 8002284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002288:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002294:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80022a4:	4649      	mov	r1, r9
 80022a6:	008b      	lsls	r3, r1, #2
 80022a8:	4641      	mov	r1, r8
 80022aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ae:	4641      	mov	r1, r8
 80022b0:	008a      	lsls	r2, r1, #2
 80022b2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022b6:	f7fd ff8d 	bl	80001d4 <__aeabi_uldivmod>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <UART_SetConfig+0x99c>)
 80022c0:	fba3 1302 	umull	r1, r3, r3, r2
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	2164      	movs	r1, #100	; 0x64
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	3332      	adds	r3, #50	; 0x32
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <UART_SetConfig+0x99c>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	f003 020f 	and.w	r2, r3, #15
 80022de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4422      	add	r2, r4
 80022e6:	609a      	str	r2, [r3, #8]
}
 80022e8:	e7ff      	b.n	80022ea <UART_SetConfig+0x98e>
 80022ea:	bf00      	nop
 80022ec:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80022f0:	46bd      	mov	sp, r7
 80022f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f6:	bf00      	nop
 80022f8:	51eb851f 	.word	0x51eb851f

080022fc <memset>:
 80022fc:	4402      	add	r2, r0
 80022fe:	4603      	mov	r3, r0
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	f803 1b01 	strb.w	r1, [r3], #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <__libc_init_array>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	4d0d      	ldr	r5, [pc, #52]	; (8002344 <__libc_init_array+0x38>)
 8002310:	4c0d      	ldr	r4, [pc, #52]	; (8002348 <__libc_init_array+0x3c>)
 8002312:	1b64      	subs	r4, r4, r5
 8002314:	10a4      	asrs	r4, r4, #2
 8002316:	2600      	movs	r6, #0
 8002318:	42a6      	cmp	r6, r4
 800231a:	d109      	bne.n	8002330 <__libc_init_array+0x24>
 800231c:	4d0b      	ldr	r5, [pc, #44]	; (800234c <__libc_init_array+0x40>)
 800231e:	4c0c      	ldr	r4, [pc, #48]	; (8002350 <__libc_init_array+0x44>)
 8002320:	f000 f818 	bl	8002354 <_init>
 8002324:	1b64      	subs	r4, r4, r5
 8002326:	10a4      	asrs	r4, r4, #2
 8002328:	2600      	movs	r6, #0
 800232a:	42a6      	cmp	r6, r4
 800232c:	d105      	bne.n	800233a <__libc_init_array+0x2e>
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	f855 3b04 	ldr.w	r3, [r5], #4
 8002334:	4798      	blx	r3
 8002336:	3601      	adds	r6, #1
 8002338:	e7ee      	b.n	8002318 <__libc_init_array+0xc>
 800233a:	f855 3b04 	ldr.w	r3, [r5], #4
 800233e:	4798      	blx	r3
 8002340:	3601      	adds	r6, #1
 8002342:	e7f2      	b.n	800232a <__libc_init_array+0x1e>
 8002344:	0800238c 	.word	0x0800238c
 8002348:	0800238c 	.word	0x0800238c
 800234c:	0800238c 	.word	0x0800238c
 8002350:	08002390 	.word	0x08002390

08002354 <_init>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	bf00      	nop
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr

08002360 <_fini>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	bf00      	nop
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr
