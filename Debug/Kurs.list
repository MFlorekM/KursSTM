
Kurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a4  080034a4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080034a4  080034a4  000134a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034ac  080034ac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080034b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000005c  08003510  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003510  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c3f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190c  00000000  00000000  00026d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00028620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050b  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014ef4  00000000  00000000  00029203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a64  00000000  00000000  0003e0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082689  00000000  00000000  00046b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f18  00000000  00000000  000c91e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000cb0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800341c 	.word	0x0800341c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800341c 	.word	0x0800341c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <MX_GPIO_Init+0xe0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a30      	ldr	r2, [pc, #192]	; (800065c <MX_GPIO_Init+0xe0>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <MX_GPIO_Init+0xe0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <MX_GPIO_Init+0xe0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a29      	ldr	r2, [pc, #164]	; (800065c <MX_GPIO_Init+0xe0>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b27      	ldr	r3, [pc, #156]	; (800065c <MX_GPIO_Init+0xe0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <MX_GPIO_Init+0xe0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a22      	ldr	r2, [pc, #136]	; (800065c <MX_GPIO_Init+0xe0>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <MX_GPIO_Init+0xe0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_GPIO_Init+0xe0>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_GPIO_Init+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <MX_GPIO_Init+0xe4>)
 8000608:	f000 fd9c 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_P1_Pin;
 800060c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_GPIO_Init+0xe8>)
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_P1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <MX_GPIO_Init+0xec>)
 8000622:	f000 fc0b 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000626:	2320      	movs	r3, #32
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <MX_GPIO_Init+0xe4>)
 800063e:	f000 fbfd 	bl	8000e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2028      	movs	r0, #40	; 0x28
 8000648:	f000 fb9f 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800064c:	2028      	movs	r0, #40	; 0x28
 800064e:	f000 fbb8 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000
 8000664:	10110000 	.word	0x10110000
 8000668:	40020800 	.word	0x40020800

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fa3e 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f80e 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff ff80 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f994 	bl	80009a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	4902      	ldr	r1, [pc, #8]	; (800068c <main+0x20>)
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <main+0x24>)
 8000686:	f001 fac9 	bl	8001c1c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x1e>
 800068c:	20000078 	.word	0x20000078
 8000690:	20000098 	.word	0x20000098

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fa36 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a28      	ldr	r2, [pc, #160]	; (8000764 <SystemClock_Config+0xd0>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd4>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fd5c 	bl	80011dc <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f887 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 ffb4 	bl	80016b8 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 f871 	bl	800083c <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_P1_Pin)
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077c:	d103      	bne.n	8000786 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800077e:	2120      	movs	r1, #32
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <HAL_GPIO_EXTI_Callback+0x24>)
 8000782:	f000 fcf8 	bl	8001176 <HAL_GPIO_TogglePin>
	}
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000

08000794 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <HAL_UART_RxCpltCallback+0x84>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d134      	bne.n	8000810 <HAL_UART_RxCpltCallback+0x7c>
	{
		if(znak == 'e')
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_UART_RxCpltCallback+0x88>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b65      	cmp	r3, #101	; 0x65
 80007ac:	d10c      	bne.n	80007c8 <HAL_UART_RxCpltCallback+0x34>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	481b      	ldr	r0, [pc, #108]	; (8000820 <HAL_UART_RxCpltCallback+0x8c>)
 80007b4:	f000 fcc6 	bl	8001144 <HAL_GPIO_WritePin>
			sprintf(komunikat, "Dioda ON");
 80007b8:	491a      	ldr	r1, [pc, #104]	; (8000824 <HAL_UART_RxCpltCallback+0x90>)
 80007ba:	481b      	ldr	r0, [pc, #108]	; (8000828 <HAL_UART_RxCpltCallback+0x94>)
 80007bc:	f002 f98a 	bl	8002ad4 <siprintf>
			dl_kom = 8;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <HAL_UART_RxCpltCallback+0x98>)
 80007c2:	2208      	movs	r2, #8
 80007c4:	801a      	strh	r2, [r3, #0]
 80007c6:	e017      	b.n	80007f8 <HAL_UART_RxCpltCallback+0x64>
		}
		else if(znak == 'd')
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_UART_RxCpltCallback+0x88>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b64      	cmp	r3, #100	; 0x64
 80007ce:	d10c      	bne.n	80007ea <HAL_UART_RxCpltCallback+0x56>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <HAL_UART_RxCpltCallback+0x8c>)
 80007d6:	f000 fcb5 	bl	8001144 <HAL_GPIO_WritePin>
			sprintf(komunikat, "Dioda OFF");
 80007da:	4915      	ldr	r1, [pc, #84]	; (8000830 <HAL_UART_RxCpltCallback+0x9c>)
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <HAL_UART_RxCpltCallback+0x94>)
 80007de:	f002 f979 	bl	8002ad4 <siprintf>
			dl_kom = 9;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_UART_RxCpltCallback+0x98>)
 80007e4:	2209      	movs	r2, #9
 80007e6:	801a      	strh	r2, [r3, #0]
 80007e8:	e006      	b.n	80007f8 <HAL_UART_RxCpltCallback+0x64>
		}
		else
		{
			sprintf(komunikat, "Zly znak");
 80007ea:	4912      	ldr	r1, [pc, #72]	; (8000834 <HAL_UART_RxCpltCallback+0xa0>)
 80007ec:	480e      	ldr	r0, [pc, #56]	; (8000828 <HAL_UART_RxCpltCallback+0x94>)
 80007ee:	f002 f971 	bl	8002ad4 <siprintf>
			dl_kom = 8;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_UART_RxCpltCallback+0x98>)
 80007f4:	2208      	movs	r2, #8
 80007f6:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, komunikat, dl_kom);
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_UART_RxCpltCallback+0x98>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	490a      	ldr	r1, [pc, #40]	; (8000828 <HAL_UART_RxCpltCallback+0x94>)
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <HAL_UART_RxCpltCallback+0xa4>)
 8000802:	f001 f9c6 	bl	8001b92 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	4904      	ldr	r1, [pc, #16]	; (800081c <HAL_UART_RxCpltCallback+0x88>)
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <HAL_UART_RxCpltCallback+0xa4>)
 800080c:	f001 fa06 	bl	8001c1c <HAL_UART_Receive_IT>
	}
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40004400 	.word	0x40004400
 800081c:	20000078 	.word	0x20000078
 8000820:	40020000 	.word	0x40020000
 8000824:	08003434 	.word	0x08003434
 8000828:	2000007c 	.word	0x2000007c
 800082c:	20000090 	.word	0x20000090
 8000830:	08003440 	.word	0x08003440
 8000834:	0800344c 	.word	0x0800344c
 8000838:	20000098 	.word	0x20000098

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000886:	2007      	movs	r0, #7
 8000888:	f000 fa74 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f956 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <USART2_IRQHandler+0x10>)
 80008f2:	f001 f9e9 	bl	8001cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000098 	.word	0x20000098

08000900 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_P1_Pin);
 8000904:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000908:	f000 fc50 	bl	80011ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f002 f8f0 	bl	8002b24 <__errno>
 8000944:	4603      	mov	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <_sbrk+0x64>)
 8000960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20018000 	.word	0x20018000
 8000970:	00000400 	.word	0x00000400
 8000974:	20000094 	.word	0x20000094
 8000978:	20000228 	.word	0x20000228

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <SystemInit+0x28>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <SystemInit+0x28>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SystemInit+0x28>)
 8000992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000996:	609a      	str	r2, [r3, #8]
#endif
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f001 f88a 	bl	8001af8 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f7ff ff27 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000098 	.word	0x20000098
 80009f8:	40004400 	.word	0x40004400

080009fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_UART_MspInit+0x94>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d133      	bne.n	8000a86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a72:	f000 f9e3 	bl	8000e3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2026      	movs	r0, #38	; 0x26
 8000a7c:	f000 f985 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a80:	2026      	movs	r0, #38	; 0x26
 8000a82:	f000 f99e 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ff59 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f002 f831 	bl	8002b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fdcd 	bl	800066c <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ad8:	080034b4 	.word	0x080034b4
  ldr  r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae0:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 8000ae4:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 8000ae8:	20000224 	.word	0x20000224

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f92b 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fe90 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f943 	bl	8000dde <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f90b 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	200000d8 	.word	0x200000d8

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000d8 	.word	0x200000d8

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d004      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e00c      	b.n	8000e2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2205      	movs	r2, #5
 8000e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e159      	b.n	800110c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8148 	bne.w	8001106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d00b      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8a:	2b11      	cmp	r3, #17
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0xfc>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a2 	beq.w	8001106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b57      	ldr	r3, [pc, #348]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a56      	ldr	r2, [pc, #344]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b54      	ldr	r3, [pc, #336]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a52      	ldr	r2, [pc, #328]	; (8001128 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a49      	ldr	r2, [pc, #292]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x202>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a48      	ldr	r2, [pc, #288]	; (8001130 <HAL_GPIO_Init+0x2f4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x1fe>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a47      	ldr	r2, [pc, #284]	; (8001134 <HAL_GPIO_Init+0x2f8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x1fa>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a46      	ldr	r2, [pc, #280]	; (8001138 <HAL_GPIO_Init+0x2fc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x1f6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <HAL_GPIO_Init+0x300>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x1f2>
 800102a:	2304      	movs	r3, #4
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800102e:	2307      	movs	r3, #7
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x204>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x204>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x2ec>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_GPIO_Init+0x304>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_GPIO_Init+0x304>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f aea2 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	401a      	ands	r2, r3
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	429a      	cmp	r2, r3
 800118e:	d104      	bne.n	800119a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	041a      	lsls	r2, r3, #16
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff face 	bl	800076c <HAL_GPIO_EXTI_Callback>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e25e      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d075      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b85      	ldr	r3, [pc, #532]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b82      	ldr	r3, [pc, #520]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b7e      	ldr	r3, [pc, #504]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e239      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0x74>
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b70      	ldr	r3, [pc, #448]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6f      	ldr	r2, [pc, #444]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b6d      	ldr	r3, [pc, #436]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6c      	ldr	r2, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001274:	4b69      	ldr	r3, [pc, #420]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a68      	ldr	r2, [pc, #416]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b66      	ldr	r3, [pc, #408]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fc92 	bl	8000bbc <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fc8e 	bl	8000bbc <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1fe      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xc0>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc7e 	bl	8000bbc <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fc7a 	bl	8000bbc <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1ea      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b51      	ldr	r3, [pc, #324]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	4b4a      	ldr	r3, [pc, #296]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b44      	ldr	r3, [pc, #272]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1be      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4937      	ldr	r1, [pc, #220]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_RCC_OscConfig+0x244>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fc33 	bl	8000bbc <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fc2f 	bl	8000bbc <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e19f      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4925      	ldr	r1, [pc, #148]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_RCC_OscConfig+0x244>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc12 	bl	8000bbc <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc0e 	bl	8000bbc <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e17e      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d036      	beq.n	8001434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_RCC_OscConfig+0x248>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fbf2 	bl	8000bbc <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fbee 	bl	8000bbc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e15e      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x200>
 80013fa:	e01b      	b.n	8001434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_OscConfig+0x248>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fbdb 	bl	8000bbc <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e00e      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fbd7 	bl	8000bbc <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d907      	bls.n	8001428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e147      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
 800141c:	40023800 	.word	0x40023800
 8001420:	42470000 	.word	0x42470000
 8001424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800142a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ea      	bne.n	800140a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8097 	beq.w	8001570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b7d      	ldr	r3, [pc, #500]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a7c      	ldr	r2, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b7a      	ldr	r3, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147e:	4b74      	ldr	r3, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a73      	ldr	r2, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb97 	bl	8000bbc <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fb93 	bl	8000bbc <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e103      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2ea>
 80014b8:	4b64      	ldr	r3, [pc, #400]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a63      	ldr	r2, [pc, #396]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x30c>
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5e      	ldr	r2, [pc, #376]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a5b      	ldr	r2, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a57      	ldr	r2, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a54      	ldr	r2, [pc, #336]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d015      	beq.n	8001534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fb58 	bl	8000bbc <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fb54 	bl	8000bbc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0c2      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0ee      	beq.n	8001510 <HAL_RCC_OscConfig+0x334>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fb42 	bl	8000bbc <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fb3e 	bl	8000bbc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0ac      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ee      	bne.n	800153c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a38      	ldr	r2, [pc, #224]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8098 	beq.w	80016aa <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d05c      	beq.n	8001640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d141      	bne.n	8001612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb12 	bl	8000bbc <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb0e 	bl	8000bbc <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e07e      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	3b01      	subs	r3, #1
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	491b      	ldr	r1, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fae7 	bl	8000bbc <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fae3 	bl	8000bbc <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e053      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x416>
 8001610:	e04b      	b.n	80016aa <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fad0 	bl	8000bbc <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff facc 	bl	8000bbc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e03c      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x444>
 800163e:	e034      	b.n	80016aa <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e02f      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000
 8001654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	429a      	cmp	r2, r3
 800166a:	d11c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d115      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001680:	4013      	ands	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001686:	4293      	cmp	r3, r2
 8001688:	d10d      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0cc      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d90c      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b65      	ldr	r3, [pc, #404]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0b8      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800170c:	4b59      	ldr	r3, [pc, #356]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800172e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001730:	4b50      	ldr	r3, [pc, #320]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	494d      	ldr	r1, [pc, #308]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d044      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d003      	beq.n	8001776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	2b03      	cmp	r3, #3
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e067      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4934      	ldr	r1, [pc, #208]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7ff fa08 	bl	8000bbc <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff fa04 	bl	8000bbc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e04f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d20c      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e032      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4916      	ldr	r1, [pc, #88]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	490e      	ldr	r1, [pc, #56]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800183e:	f000 f821 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001842:	4602      	mov	r2, r0
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	490a      	ldr	r1, [pc, #40]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	5ccb      	ldrb	r3, [r1, r3]
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f968 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00
 8001874:	40023800 	.word	0x40023800
 8001878:	08003458 	.word	0x08003458
 800187c:	20000000 	.word	0x20000000
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001888:	b094      	sub	sp, #80	; 0x50
 800188a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
 8001890:	2300      	movs	r3, #0
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001894:	2300      	movs	r3, #0
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800189c:	4b79      	ldr	r3, [pc, #484]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d00d      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x40>
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	f200 80e1 	bhi.w	8001a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x34>
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x3a>
 80018b6:	e0db      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018bc:	e0db      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018be:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80018c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018c2:	e0d8      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c4:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ce:	4b6d      	ldr	r3, [pc, #436]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	2200      	movs	r2, #0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
 80018f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018f6:	4622      	mov	r2, r4
 80018f8:	462b      	mov	r3, r5
 80018fa:	f04f 0000 	mov.w	r0, #0
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	0159      	lsls	r1, r3, #5
 8001904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001908:	0150      	lsls	r0, r2, #5
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4621      	mov	r1, r4
 8001910:	1a51      	subs	r1, r2, r1
 8001912:	6139      	str	r1, [r7, #16]
 8001914:	4629      	mov	r1, r5
 8001916:	eb63 0301 	sbc.w	r3, r3, r1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001928:	4659      	mov	r1, fp
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	4651      	mov	r1, sl
 800192e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001932:	4651      	mov	r1, sl
 8001934:	018a      	lsls	r2, r1, #6
 8001936:	4651      	mov	r1, sl
 8001938:	ebb2 0801 	subs.w	r8, r2, r1
 800193c:	4659      	mov	r1, fp
 800193e:	eb63 0901 	sbc.w	r9, r3, r1
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800194e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001956:	4690      	mov	r8, r2
 8001958:	4699      	mov	r9, r3
 800195a:	4623      	mov	r3, r4
 800195c:	eb18 0303 	adds.w	r3, r8, r3
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	462b      	mov	r3, r5
 8001964:	eb49 0303 	adc.w	r3, r9, r3
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001976:	4629      	mov	r1, r5
 8001978:	024b      	lsls	r3, r1, #9
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001980:	4621      	mov	r1, r4
 8001982:	024a      	lsls	r2, r1, #9
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198a:	2200      	movs	r2, #0
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
 800198e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001994:	f7fe fc74 	bl	8000280 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019a0:	e058      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	2200      	movs	r2, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	4611      	mov	r1, r2
 80019ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019bc:	4642      	mov	r2, r8
 80019be:	464b      	mov	r3, r9
 80019c0:	f04f 0000 	mov.w	r0, #0
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	0159      	lsls	r1, r3, #5
 80019ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ce:	0150      	lsls	r0, r2, #5
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4641      	mov	r1, r8
 80019d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019da:	4649      	mov	r1, r9
 80019dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019f4:	ebb2 040a 	subs.w	r4, r2, sl
 80019f8:	eb63 050b 	sbc.w	r5, r3, fp
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	00eb      	lsls	r3, r5, #3
 8001a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a0a:	00e2      	lsls	r2, r4, #3
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	461d      	mov	r5, r3
 8001a10:	4643      	mov	r3, r8
 8001a12:	18e3      	adds	r3, r4, r3
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	464b      	mov	r3, r9
 8001a18:	eb45 0303 	adc.w	r3, r5, r3
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	028b      	lsls	r3, r1, #10
 8001a2e:	4621      	mov	r1, r4
 8001a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a34:	4621      	mov	r1, r4
 8001a36:	028a      	lsls	r2, r1, #10
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	61fa      	str	r2, [r7, #28]
 8001a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a48:	f7fe fc1a 	bl	8000280 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3750      	adds	r7, #80	; 0x50
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	007a1200 	.word	0x007a1200

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0a9b      	lsrs	r3, r3, #10
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08003468 	.word	0x08003468

08001ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ad4:	f7ff ffdc 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0b5b      	lsrs	r3, r3, #13
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08003468 	.word	0x08003468

08001af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e03f      	b.n	8001b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe ff6c 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2224      	movs	r2, #36	; 0x24
 8001b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 faf9 	bl	8002134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d130      	bne.n	8001c0e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_UART_Transmit_IT+0x26>
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e029      	b.n	8001c10 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Transmit_IT+0x38>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e022      	b.n	8001c10 <HAL_UART_Transmit_IT+0x7e>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2221      	movs	r2, #33	; 0x21
 8001bee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
  }
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	4613      	mov	r3, r2
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d140      	bne.n	8001cb8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_UART_Receive_IT+0x26>
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e039      	b.n	8001cba <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_UART_Receive_IT+0x38>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e032      	b.n	8001cba <HAL_UART_Receive_IT+0x9e>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2222      	movs	r2, #34	; 0x22
 8001c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c92:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_UART_IRQHandler+0x52>
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f98c 	bl	8002030 <UART_Receive_IT>
      return;
 8001d18:	e0d0      	b.n	8001ebc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80b0 	beq.w	8001e82 <HAL_UART_IRQHandler+0x1ba>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_UART_IRQHandler+0x70>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80a5 	beq.w	8001e82 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_UART_IRQHandler+0x90>
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_UART_IRQHandler+0xb0>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	f043 0202 	orr.w	r2, r3, #2
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_UART_IRQHandler+0xd0>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	f043 0204 	orr.w	r2, r3, #4
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00f      	beq.n	8001dc2 <HAL_UART_IRQHandler+0xfa>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d104      	bne.n	8001db6 <HAL_UART_IRQHandler+0xee>
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	f043 0208 	orr.w	r2, r3, #8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d077      	beq.n	8001eba <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_UART_IRQHandler+0x11c>
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f926 	bl	8002030 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <HAL_UART_IRQHandler+0x144>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d031      	beq.n	8001e70 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f86f 	bl	8001ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d123      	bne.n	8001e68 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <HAL_UART_IRQHandler+0x1fc>)
 8001e3e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ffd6 	bl	8000df6 <HAL_DMA_Abort_IT>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d016      	beq.n	8001e7e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e5e:	e00e      	b.n	8001e7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f83b 	bl	8001edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e66:	e00a      	b.n	8001e7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f837 	bl	8001edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e6e:	e006      	b.n	8001e7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f833 	bl	8001edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e7c:	e01d      	b.n	8001eba <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7e:	bf00      	nop
    return;
 8001e80:	e01b      	b.n	8001eba <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_UART_IRQHandler+0x1d6>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f85c 	bl	8001f54 <UART_Transmit_IT>
    return;
 8001e9c:	e00e      	b.n	8001ebc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HAL_UART_IRQHandler+0x1f4>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8a4 	bl	8002000 <UART_EndTransmit_IT>
    return;
 8001eb8:	e000      	b.n	8001ebc <HAL_UART_IRQHandler+0x1f4>
    return;
 8001eba:	bf00      	nop
  }
}
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	08001f2d 	.word	0x08001f2d

08001ec8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff ffc8 	bl	8001edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b21      	cmp	r3, #33	; 0x21
 8001f66:	d144      	bne.n	8001ff2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d11a      	bne.n	8001fa8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f86:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	1c9a      	adds	r2, r3, #2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	621a      	str	r2, [r3, #32]
 8001f9a:	e00e      	b.n	8001fba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	621a      	str	r2, [r3, #32]
 8001fa6:	e008      	b.n	8001fba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6211      	str	r1, [r2, #32]
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
  }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002016:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff51 	bl	8001ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b22      	cmp	r3, #34	; 0x22
 8002042:	d171      	bne.n	8002128 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204c:	d123      	bne.n	8002096 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10e      	bne.n	800207a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	1c9a      	adds	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
 8002078:	e029      	b.n	80020ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
 8002094:	e01b      	b.n	80020ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6858      	ldr	r0, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	1c59      	adds	r1, r3, #1
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6291      	str	r1, [r2, #40]	; 0x28
 80020ae:	b2c2      	uxtb	r2, r0
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e00c      	b.n	80020ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	1c58      	adds	r0, r3, #1
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	6288      	str	r0, [r1, #40]	; 0x28
 80020c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4619      	mov	r1, r3
 80020dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d120      	bne.n	8002124 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0220 	bic.w	r2, r2, #32
 80020f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fb3a 	bl	8000794 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e002      	b.n	800212a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800213c:	af00      	add	r7, sp, #0
 800213e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002142:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800214e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002152:	68d9      	ldr	r1, [r3, #12]
 8002154:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	ea40 0301 	orr.w	r3, r0, r1
 800215e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002160:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	431a      	orrs	r2, r3
 800216e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	431a      	orrs	r2, r3
 8002176:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8002182:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800218e:	f021 010c 	bic.w	r1, r1, #12
 8002192:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b0:	6999      	ldr	r1, [r3, #24]
 80021b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	ea40 0301 	orr.w	r3, r0, r1
 80021bc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c8:	f040 824a 	bne.w	8002660 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b96      	ldr	r3, [pc, #600]	; (800242c <UART_SetConfig+0x2f8>)
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d006      	beq.n	80021e6 <UART_SetConfig+0xb2>
 80021d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b94      	ldr	r3, [pc, #592]	; (8002430 <UART_SetConfig+0x2fc>)
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8129 	bne.w	8002438 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021e6:	f7ff fc73 	bl	8001ad0 <HAL_RCC_GetPCLK2Freq>
 80021ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80021f8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80021fc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8002200:	4622      	mov	r2, r4
 8002202:	462b      	mov	r3, r5
 8002204:	1891      	adds	r1, r2, r2
 8002206:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800220a:	415b      	adcs	r3, r3
 800220c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002210:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002214:	4621      	mov	r1, r4
 8002216:	1851      	adds	r1, r2, r1
 8002218:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800221c:	4629      	mov	r1, r5
 800221e:	414b      	adcs	r3, r1
 8002220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8002230:	4649      	mov	r1, r9
 8002232:	00cb      	lsls	r3, r1, #3
 8002234:	4641      	mov	r1, r8
 8002236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223a:	4641      	mov	r1, r8
 800223c:	00ca      	lsls	r2, r1, #3
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	4603      	mov	r3, r0
 8002244:	4622      	mov	r2, r4
 8002246:	189b      	adds	r3, r3, r2
 8002248:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800224c:	462b      	mov	r3, r5
 800224e:	460a      	mov	r2, r1
 8002250:	eb42 0303 	adc.w	r3, r2, r3
 8002254:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002264:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8002268:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800226c:	460b      	mov	r3, r1
 800226e:	18db      	adds	r3, r3, r3
 8002270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002274:	4613      	mov	r3, r2
 8002276:	eb42 0303 	adc.w	r3, r2, r3
 800227a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800227e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002282:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8002286:	f7fd fffb 	bl	8000280 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4b69      	ldr	r3, [pc, #420]	; (8002434 <UART_SetConfig+0x300>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	011c      	lsls	r4, r3, #4
 8002298:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800229c:	2200      	movs	r2, #0
 800229e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80022a2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80022a6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80022aa:	4642      	mov	r2, r8
 80022ac:	464b      	mov	r3, r9
 80022ae:	1891      	adds	r1, r2, r2
 80022b0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80022b4:	415b      	adcs	r3, r3
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80022ba:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80022be:	4641      	mov	r1, r8
 80022c0:	1851      	adds	r1, r2, r1
 80022c2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80022c6:	4649      	mov	r1, r9
 80022c8:	414b      	adcs	r3, r1
 80022ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80022da:	4659      	mov	r1, fp
 80022dc:	00cb      	lsls	r3, r1, #3
 80022de:	4651      	mov	r1, sl
 80022e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e4:	4651      	mov	r1, sl
 80022e6:	00ca      	lsls	r2, r1, #3
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	4642      	mov	r2, r8
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80022f6:	464b      	mov	r3, r9
 80022f8:	460a      	mov	r2, r1
 80022fa:	eb42 0303 	adc.w	r3, r2, r3
 80022fe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002302:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800230e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8002312:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8002316:	460b      	mov	r3, r1
 8002318:	18db      	adds	r3, r3, r3
 800231a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800231e:	4613      	mov	r3, r2
 8002320:	eb42 0303 	adc.w	r3, r2, r3
 8002324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002328:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800232c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8002330:	f7fd ffa6 	bl	8000280 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4611      	mov	r1, r2
 800233a:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <UART_SetConfig+0x300>)
 800233c:	fba3 2301 	umull	r2, r3, r3, r1
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	2264      	movs	r2, #100	; 0x64
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	1acb      	subs	r3, r1, r3
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002350:	4b38      	ldr	r3, [pc, #224]	; (8002434 <UART_SetConfig+0x300>)
 8002352:	fba3 2302 	umull	r2, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800235e:	441c      	add	r4, r3
 8002360:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002364:	2200      	movs	r2, #0
 8002366:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800236a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800236e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8002372:	4642      	mov	r2, r8
 8002374:	464b      	mov	r3, r9
 8002376:	1891      	adds	r1, r2, r2
 8002378:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800237c:	415b      	adcs	r3, r3
 800237e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002382:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002386:	4641      	mov	r1, r8
 8002388:	1851      	adds	r1, r2, r1
 800238a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800238e:	4649      	mov	r1, r9
 8002390:	414b      	adcs	r3, r1
 8002392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80023a2:	4659      	mov	r1, fp
 80023a4:	00cb      	lsls	r3, r1, #3
 80023a6:	4651      	mov	r1, sl
 80023a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ac:	4651      	mov	r1, sl
 80023ae:	00ca      	lsls	r2, r1, #3
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	4642      	mov	r2, r8
 80023b8:	189b      	adds	r3, r3, r2
 80023ba:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80023be:	464b      	mov	r3, r9
 80023c0:	460a      	mov	r2, r1
 80023c2:	eb42 0303 	adc.w	r3, r2, r3
 80023c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80023d6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80023da:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80023de:	460b      	mov	r3, r1
 80023e0:	18db      	adds	r3, r3, r3
 80023e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023e6:	4613      	mov	r3, r2
 80023e8:	eb42 0303 	adc.w	r3, r2, r3
 80023ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80023f0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80023f4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80023f8:	f7fd ff42 	bl	8000280 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <UART_SetConfig+0x300>)
 8002402:	fba3 1302 	umull	r1, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2164      	movs	r1, #100	; 0x64
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <UART_SetConfig+0x300>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	f003 0207 	and.w	r2, r3, #7
 8002420:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4422      	add	r2, r4
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	e34a      	b.n	8002ac2 <UART_SetConfig+0x98e>
 800242c:	40011000 	.word	0x40011000
 8002430:	40011400 	.word	0x40011400
 8002434:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002438:	f7ff fb36 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 800243c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002440:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002444:	2200      	movs	r2, #0
 8002446:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800244a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800244e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	1891      	adds	r1, r2, r2
 8002458:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800245c:	415b      	adcs	r3, r3
 800245e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002462:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002466:	4621      	mov	r1, r4
 8002468:	eb12 0a01 	adds.w	sl, r2, r1
 800246c:	4629      	mov	r1, r5
 800246e:	eb43 0b01 	adc.w	fp, r3, r1
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800247e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002486:	4692      	mov	sl, r2
 8002488:	469b      	mov	fp, r3
 800248a:	4623      	mov	r3, r4
 800248c:	eb1a 0303 	adds.w	r3, sl, r3
 8002490:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002494:	462b      	mov	r3, r5
 8002496:	eb4b 0303 	adc.w	r3, fp, r3
 800249a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800249e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80024aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80024ae:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80024b2:	460b      	mov	r3, r1
 80024b4:	18db      	adds	r3, r3, r3
 80024b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024ba:	4613      	mov	r3, r2
 80024bc:	eb42 0303 	adc.w	r3, r2, r3
 80024c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80024c8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80024cc:	f7fd fed8 	bl	8000280 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <UART_SetConfig+0x528>)
 80024d6:	fba3 2302 	umull	r2, r3, r3, r2
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	011c      	lsls	r4, r3, #4
 80024de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024e2:	2200      	movs	r2, #0
 80024e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80024e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80024ec:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80024f0:	4642      	mov	r2, r8
 80024f2:	464b      	mov	r3, r9
 80024f4:	1891      	adds	r1, r2, r2
 80024f6:	67b9      	str	r1, [r7, #120]	; 0x78
 80024f8:	415b      	adcs	r3, r3
 80024fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002500:	4641      	mov	r1, r8
 8002502:	1851      	adds	r1, r2, r1
 8002504:	6739      	str	r1, [r7, #112]	; 0x70
 8002506:	4649      	mov	r1, r9
 8002508:	414b      	adcs	r3, r1
 800250a:	677b      	str	r3, [r7, #116]	; 0x74
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8002518:	4659      	mov	r1, fp
 800251a:	00cb      	lsls	r3, r1, #3
 800251c:	4651      	mov	r1, sl
 800251e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002522:	4651      	mov	r1, sl
 8002524:	00ca      	lsls	r2, r1, #3
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	4603      	mov	r3, r0
 800252c:	4642      	mov	r2, r8
 800252e:	189b      	adds	r3, r3, r2
 8002530:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002534:	464b      	mov	r3, r9
 8002536:	460a      	mov	r2, r1
 8002538:	eb42 0303 	adc.w	r3, r2, r3
 800253c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800254c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8002550:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8002554:	460b      	mov	r3, r1
 8002556:	18db      	adds	r3, r3, r3
 8002558:	66bb      	str	r3, [r7, #104]	; 0x68
 800255a:	4613      	mov	r3, r2
 800255c:	eb42 0303 	adc.w	r3, r2, r3
 8002560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002562:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002566:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800256a:	f7fd fe89 	bl	8000280 <__aeabi_uldivmod>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4611      	mov	r1, r2
 8002574:	4b39      	ldr	r3, [pc, #228]	; (800265c <UART_SetConfig+0x528>)
 8002576:	fba3 2301 	umull	r2, r3, r3, r1
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2264      	movs	r2, #100	; 0x64
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	1acb      	subs	r3, r1, r3
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <UART_SetConfig+0x528>)
 800258c:	fba3 2302 	umull	r2, r3, r3, r2
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002598:	441c      	add	r4, r3
 800259a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80025a4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80025a8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80025ac:	4642      	mov	r2, r8
 80025ae:	464b      	mov	r3, r9
 80025b0:	1891      	adds	r1, r2, r2
 80025b2:	6639      	str	r1, [r7, #96]	; 0x60
 80025b4:	415b      	adcs	r3, r3
 80025b6:	667b      	str	r3, [r7, #100]	; 0x64
 80025b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80025bc:	4641      	mov	r1, r8
 80025be:	1851      	adds	r1, r2, r1
 80025c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80025c2:	4649      	mov	r1, r9
 80025c4:	414b      	adcs	r3, r1
 80025c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80025d4:	4659      	mov	r1, fp
 80025d6:	00cb      	lsls	r3, r1, #3
 80025d8:	4651      	mov	r1, sl
 80025da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025de:	4651      	mov	r1, sl
 80025e0:	00ca      	lsls	r2, r1, #3
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	4642      	mov	r2, r8
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80025f0:	464b      	mov	r3, r9
 80025f2:	460a      	mov	r2, r1
 80025f4:	eb42 0303 	adc.w	r3, r2, r3
 80025f8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80025fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002608:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800260c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8002610:	460b      	mov	r3, r1
 8002612:	18db      	adds	r3, r3, r3
 8002614:	653b      	str	r3, [r7, #80]	; 0x50
 8002616:	4613      	mov	r3, r2
 8002618:	eb42 0303 	adc.w	r3, r2, r3
 800261c:	657b      	str	r3, [r7, #84]	; 0x54
 800261e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002622:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002626:	f7fd fe2b 	bl	8000280 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <UART_SetConfig+0x528>)
 8002630:	fba3 1302 	umull	r1, r3, r3, r2
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	2164      	movs	r1, #100	; 0x64
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	3332      	adds	r3, #50	; 0x32
 8002642:	4a06      	ldr	r2, [pc, #24]	; (800265c <UART_SetConfig+0x528>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	f003 0207 	and.w	r2, r3, #7
 800264e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4422      	add	r2, r4
 8002656:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002658:	e233      	b.n	8002ac2 <UART_SetConfig+0x98e>
 800265a:	bf00      	nop
 800265c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002660:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b8d      	ldr	r3, [pc, #564]	; (800289c <UART_SetConfig+0x768>)
 8002668:	429a      	cmp	r2, r3
 800266a:	d006      	beq.n	800267a <UART_SetConfig+0x546>
 800266c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b8b      	ldr	r3, [pc, #556]	; (80028a0 <UART_SetConfig+0x76c>)
 8002674:	429a      	cmp	r2, r3
 8002676:	f040 8117 	bne.w	80028a8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800267a:	f7ff fa29 	bl	8001ad0 <HAL_RCC_GetPCLK2Freq>
 800267e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002682:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800268c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002690:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002694:	4622      	mov	r2, r4
 8002696:	462b      	mov	r3, r5
 8002698:	1891      	adds	r1, r2, r2
 800269a:	64b9      	str	r1, [r7, #72]	; 0x48
 800269c:	415b      	adcs	r3, r3
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026a4:	4621      	mov	r1, r4
 80026a6:	eb12 0801 	adds.w	r8, r2, r1
 80026aa:	4629      	mov	r1, r5
 80026ac:	eb43 0901 	adc.w	r9, r3, r1
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c4:	4690      	mov	r8, r2
 80026c6:	4699      	mov	r9, r3
 80026c8:	4623      	mov	r3, r4
 80026ca:	eb18 0303 	adds.w	r3, r8, r3
 80026ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80026d2:	462b      	mov	r3, r5
 80026d4:	eb49 0303 	adc.w	r3, r9, r3
 80026d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80026dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026e8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80026f8:	4629      	mov	r1, r5
 80026fa:	008b      	lsls	r3, r1, #2
 80026fc:	4621      	mov	r1, r4
 80026fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002702:	4621      	mov	r1, r4
 8002704:	008a      	lsls	r2, r1, #2
 8002706:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800270a:	f7fd fdb9 	bl	8000280 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <UART_SetConfig+0x770>)
 8002714:	fba3 2302 	umull	r2, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	011c      	lsls	r4, r3, #4
 800271c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002720:	2200      	movs	r2, #0
 8002722:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002726:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800272a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800272e:	4642      	mov	r2, r8
 8002730:	464b      	mov	r3, r9
 8002732:	1891      	adds	r1, r2, r2
 8002734:	6439      	str	r1, [r7, #64]	; 0x40
 8002736:	415b      	adcs	r3, r3
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
 800273a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800273e:	4641      	mov	r1, r8
 8002740:	1851      	adds	r1, r2, r1
 8002742:	63b9      	str	r1, [r7, #56]	; 0x38
 8002744:	4649      	mov	r1, r9
 8002746:	414b      	adcs	r3, r1
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8002756:	4659      	mov	r1, fp
 8002758:	00cb      	lsls	r3, r1, #3
 800275a:	4651      	mov	r1, sl
 800275c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002760:	4651      	mov	r1, sl
 8002762:	00ca      	lsls	r2, r1, #3
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	4603      	mov	r3, r0
 800276a:	4642      	mov	r2, r8
 800276c:	189b      	adds	r3, r3, r2
 800276e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002772:	464b      	mov	r3, r9
 8002774:	460a      	mov	r2, r1
 8002776:	eb42 0303 	adc.w	r3, r2, r3
 800277a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800277e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800278a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800279a:	4649      	mov	r1, r9
 800279c:	008b      	lsls	r3, r1, #2
 800279e:	4641      	mov	r1, r8
 80027a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a4:	4641      	mov	r1, r8
 80027a6:	008a      	lsls	r2, r1, #2
 80027a8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80027ac:	f7fd fd68 	bl	8000280 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4611      	mov	r1, r2
 80027b6:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <UART_SetConfig+0x770>)
 80027b8:	fba3 2301 	umull	r2, r3, r3, r1
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	2264      	movs	r2, #100	; 0x64
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	1acb      	subs	r3, r1, r3
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	3332      	adds	r3, #50	; 0x32
 80027ca:	4a36      	ldr	r2, [pc, #216]	; (80028a4 <UART_SetConfig+0x770>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d6:	441c      	add	r4, r3
 80027d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027dc:	2200      	movs	r2, #0
 80027de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80027e2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80027e6:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80027ea:	4642      	mov	r2, r8
 80027ec:	464b      	mov	r3, r9
 80027ee:	1891      	adds	r1, r2, r2
 80027f0:	6339      	str	r1, [r7, #48]	; 0x30
 80027f2:	415b      	adcs	r3, r3
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
 80027f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027fa:	4641      	mov	r1, r8
 80027fc:	1851      	adds	r1, r2, r1
 80027fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002800:	4649      	mov	r1, r9
 8002802:	414b      	adcs	r3, r1
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8002812:	4659      	mov	r1, fp
 8002814:	00cb      	lsls	r3, r1, #3
 8002816:	4651      	mov	r1, sl
 8002818:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800281c:	4651      	mov	r1, sl
 800281e:	00ca      	lsls	r2, r1, #3
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	4603      	mov	r3, r0
 8002826:	4642      	mov	r2, r8
 8002828:	189b      	adds	r3, r3, r2
 800282a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800282e:	464b      	mov	r3, r9
 8002830:	460a      	mov	r2, r1
 8002832:	eb42 0303 	adc.w	r3, r2, r3
 8002836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800283a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002846:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8002856:	4649      	mov	r1, r9
 8002858:	008b      	lsls	r3, r1, #2
 800285a:	4641      	mov	r1, r8
 800285c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002860:	4641      	mov	r1, r8
 8002862:	008a      	lsls	r2, r1, #2
 8002864:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002868:	f7fd fd0a 	bl	8000280 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <UART_SetConfig+0x770>)
 8002872:	fba3 1302 	umull	r1, r3, r3, r2
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2164      	movs	r1, #100	; 0x64
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	3332      	adds	r3, #50	; 0x32
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <UART_SetConfig+0x770>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4422      	add	r2, r4
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	e112      	b.n	8002ac2 <UART_SetConfig+0x98e>
 800289c:	40011000 	.word	0x40011000
 80028a0:	40011400 	.word	0x40011400
 80028a4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80028a8:	f7ff f8fe 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 80028ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028b4:	2200      	movs	r2, #0
 80028b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80028ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80028be:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80028c2:	4642      	mov	r2, r8
 80028c4:	464b      	mov	r3, r9
 80028c6:	1891      	adds	r1, r2, r2
 80028c8:	6239      	str	r1, [r7, #32]
 80028ca:	415b      	adcs	r3, r3
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028d2:	4641      	mov	r1, r8
 80028d4:	1854      	adds	r4, r2, r1
 80028d6:	4649      	mov	r1, r9
 80028d8:	eb43 0501 	adc.w	r5, r3, r1
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	00eb      	lsls	r3, r5, #3
 80028e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ea:	00e2      	lsls	r2, r4, #3
 80028ec:	4614      	mov	r4, r2
 80028ee:	461d      	mov	r5, r3
 80028f0:	4643      	mov	r3, r8
 80028f2:	18e3      	adds	r3, r4, r3
 80028f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80028f8:	464b      	mov	r3, r9
 80028fa:	eb45 0303 	adc.w	r3, r5, r3
 80028fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002902:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800290e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800291e:	4629      	mov	r1, r5
 8002920:	008b      	lsls	r3, r1, #2
 8002922:	4621      	mov	r1, r4
 8002924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002928:	4621      	mov	r1, r4
 800292a:	008a      	lsls	r2, r1, #2
 800292c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002930:	f7fd fca6 	bl	8000280 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <UART_SetConfig+0x99c>)
 800293a:	fba3 2302 	umull	r2, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	011c      	lsls	r4, r3, #4
 8002942:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002946:	2200      	movs	r2, #0
 8002948:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800294c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002950:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	1891      	adds	r1, r2, r2
 800295a:	61b9      	str	r1, [r7, #24]
 800295c:	415b      	adcs	r3, r3
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002964:	4641      	mov	r1, r8
 8002966:	1851      	adds	r1, r2, r1
 8002968:	6139      	str	r1, [r7, #16]
 800296a:	4649      	mov	r1, r9
 800296c:	414b      	adcs	r3, r1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800297c:	4659      	mov	r1, fp
 800297e:	00cb      	lsls	r3, r1, #3
 8002980:	4651      	mov	r1, sl
 8002982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002986:	4651      	mov	r1, sl
 8002988:	00ca      	lsls	r2, r1, #3
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	4603      	mov	r3, r0
 8002990:	4642      	mov	r2, r8
 8002992:	189b      	adds	r3, r3, r2
 8002994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002998:	464b      	mov	r3, r9
 800299a:	460a      	mov	r2, r1
 800299c:	eb42 0303 	adc.w	r3, r2, r3
 80029a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80029a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029b0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80029c0:	4649      	mov	r1, r9
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	4641      	mov	r1, r8
 80029c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ca:	4641      	mov	r1, r8
 80029cc:	008a      	lsls	r2, r1, #2
 80029ce:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80029d2:	f7fd fc55 	bl	8000280 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <UART_SetConfig+0x99c>)
 80029de:	fba3 2301 	umull	r2, r3, r3, r1
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2264      	movs	r2, #100	; 0x64
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	1acb      	subs	r3, r1, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	3332      	adds	r3, #50	; 0x32
 80029f0:	4a37      	ldr	r2, [pc, #220]	; (8002ad0 <UART_SetConfig+0x99c>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	441c      	add	r4, r3
 80029fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a08:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a0c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	1891      	adds	r1, r2, r2
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	415b      	adcs	r3, r3
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a20:	4641      	mov	r1, r8
 8002a22:	1851      	adds	r1, r2, r1
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	4649      	mov	r1, r9
 8002a28:	414b      	adcs	r3, r1
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a38:	4659      	mov	r1, fp
 8002a3a:	00cb      	lsls	r3, r1, #3
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a42:	4651      	mov	r1, sl
 8002a44:	00ca      	lsls	r2, r1, #3
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a54:	464b      	mov	r3, r9
 8002a56:	460a      	mov	r2, r1
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a6c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	008b      	lsls	r3, r1, #2
 8002a80:	4641      	mov	r1, r8
 8002a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a86:	4641      	mov	r1, r8
 8002a88:	008a      	lsls	r2, r1, #2
 8002a8a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a8e:	f7fd fbf7 	bl	8000280 <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <UART_SetConfig+0x99c>)
 8002a98:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	2164      	movs	r1, #100	; 0x64
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	3332      	adds	r3, #50	; 0x32
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <UART_SetConfig+0x99c>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	f003 020f 	and.w	r2, r3, #15
 8002ab6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4422      	add	r2, r4
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	e7ff      	b.n	8002ac2 <UART_SetConfig+0x98e>
 8002ac2:	bf00      	nop
 8002ac4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ace:	bf00      	nop
 8002ad0:	51eb851f 	.word	0x51eb851f

08002ad4 <siprintf>:
 8002ad4:	b40e      	push	{r1, r2, r3}
 8002ad6:	b500      	push	{lr}
 8002ad8:	b09c      	sub	sp, #112	; 0x70
 8002ada:	ab1d      	add	r3, sp, #116	; 0x74
 8002adc:	9002      	str	r0, [sp, #8]
 8002ade:	9006      	str	r0, [sp, #24]
 8002ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ae4:	4809      	ldr	r0, [pc, #36]	; (8002b0c <siprintf+0x38>)
 8002ae6:	9107      	str	r1, [sp, #28]
 8002ae8:	9104      	str	r1, [sp, #16]
 8002aea:	4909      	ldr	r1, [pc, #36]	; (8002b10 <siprintf+0x3c>)
 8002aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8002af0:	9105      	str	r1, [sp, #20]
 8002af2:	6800      	ldr	r0, [r0, #0]
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	a902      	add	r1, sp, #8
 8002af8:	f000 f992 	bl	8002e20 <_svfiprintf_r>
 8002afc:	9b02      	ldr	r3, [sp, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	b01c      	add	sp, #112	; 0x70
 8002b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b08:	b003      	add	sp, #12
 8002b0a:	4770      	bx	lr
 8002b0c:	20000058 	.word	0x20000058
 8002b10:	ffff0208 	.word	0xffff0208

08002b14 <memset>:
 8002b14:	4402      	add	r2, r0
 8002b16:	4603      	mov	r3, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <__errno>:
 8002b24:	4b01      	ldr	r3, [pc, #4]	; (8002b2c <__errno+0x8>)
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000058 	.word	0x20000058

08002b30 <__libc_init_array>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	4d0d      	ldr	r5, [pc, #52]	; (8002b68 <__libc_init_array+0x38>)
 8002b34:	4c0d      	ldr	r4, [pc, #52]	; (8002b6c <__libc_init_array+0x3c>)
 8002b36:	1b64      	subs	r4, r4, r5
 8002b38:	10a4      	asrs	r4, r4, #2
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	42a6      	cmp	r6, r4
 8002b3e:	d109      	bne.n	8002b54 <__libc_init_array+0x24>
 8002b40:	4d0b      	ldr	r5, [pc, #44]	; (8002b70 <__libc_init_array+0x40>)
 8002b42:	4c0c      	ldr	r4, [pc, #48]	; (8002b74 <__libc_init_array+0x44>)
 8002b44:	f000 fc6a 	bl	800341c <_init>
 8002b48:	1b64      	subs	r4, r4, r5
 8002b4a:	10a4      	asrs	r4, r4, #2
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	42a6      	cmp	r6, r4
 8002b50:	d105      	bne.n	8002b5e <__libc_init_array+0x2e>
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b58:	4798      	blx	r3
 8002b5a:	3601      	adds	r6, #1
 8002b5c:	e7ee      	b.n	8002b3c <__libc_init_array+0xc>
 8002b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b62:	4798      	blx	r3
 8002b64:	3601      	adds	r6, #1
 8002b66:	e7f2      	b.n	8002b4e <__libc_init_array+0x1e>
 8002b68:	080034ac 	.word	0x080034ac
 8002b6c:	080034ac 	.word	0x080034ac
 8002b70:	080034ac 	.word	0x080034ac
 8002b74:	080034b0 	.word	0x080034b0

08002b78 <__retarget_lock_acquire_recursive>:
 8002b78:	4770      	bx	lr

08002b7a <__retarget_lock_release_recursive>:
 8002b7a:	4770      	bx	lr

08002b7c <_free_r>:
 8002b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d044      	beq.n	8002c0c <_free_r+0x90>
 8002b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b86:	9001      	str	r0, [sp, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8002b8e:	bfb8      	it	lt
 8002b90:	18e4      	addlt	r4, r4, r3
 8002b92:	f000 f8df 	bl	8002d54 <__malloc_lock>
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <_free_r+0x94>)
 8002b98:	9801      	ldr	r0, [sp, #4]
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	b933      	cbnz	r3, 8002bac <_free_r+0x30>
 8002b9e:	6063      	str	r3, [r4, #4]
 8002ba0:	6014      	str	r4, [r2, #0]
 8002ba2:	b003      	add	sp, #12
 8002ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ba8:	f000 b8da 	b.w	8002d60 <__malloc_unlock>
 8002bac:	42a3      	cmp	r3, r4
 8002bae:	d908      	bls.n	8002bc2 <_free_r+0x46>
 8002bb0:	6825      	ldr	r5, [r4, #0]
 8002bb2:	1961      	adds	r1, r4, r5
 8002bb4:	428b      	cmp	r3, r1
 8002bb6:	bf01      	itttt	eq
 8002bb8:	6819      	ldreq	r1, [r3, #0]
 8002bba:	685b      	ldreq	r3, [r3, #4]
 8002bbc:	1949      	addeq	r1, r1, r5
 8002bbe:	6021      	streq	r1, [r4, #0]
 8002bc0:	e7ed      	b.n	8002b9e <_free_r+0x22>
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b10b      	cbz	r3, 8002bcc <_free_r+0x50>
 8002bc8:	42a3      	cmp	r3, r4
 8002bca:	d9fa      	bls.n	8002bc2 <_free_r+0x46>
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	1855      	adds	r5, r2, r1
 8002bd0:	42a5      	cmp	r5, r4
 8002bd2:	d10b      	bne.n	8002bec <_free_r+0x70>
 8002bd4:	6824      	ldr	r4, [r4, #0]
 8002bd6:	4421      	add	r1, r4
 8002bd8:	1854      	adds	r4, r2, r1
 8002bda:	42a3      	cmp	r3, r4
 8002bdc:	6011      	str	r1, [r2, #0]
 8002bde:	d1e0      	bne.n	8002ba2 <_free_r+0x26>
 8002be0:	681c      	ldr	r4, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	6053      	str	r3, [r2, #4]
 8002be6:	440c      	add	r4, r1
 8002be8:	6014      	str	r4, [r2, #0]
 8002bea:	e7da      	b.n	8002ba2 <_free_r+0x26>
 8002bec:	d902      	bls.n	8002bf4 <_free_r+0x78>
 8002bee:	230c      	movs	r3, #12
 8002bf0:	6003      	str	r3, [r0, #0]
 8002bf2:	e7d6      	b.n	8002ba2 <_free_r+0x26>
 8002bf4:	6825      	ldr	r5, [r4, #0]
 8002bf6:	1961      	adds	r1, r4, r5
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	bf04      	itt	eq
 8002bfc:	6819      	ldreq	r1, [r3, #0]
 8002bfe:	685b      	ldreq	r3, [r3, #4]
 8002c00:	6063      	str	r3, [r4, #4]
 8002c02:	bf04      	itt	eq
 8002c04:	1949      	addeq	r1, r1, r5
 8002c06:	6021      	streq	r1, [r4, #0]
 8002c08:	6054      	str	r4, [r2, #4]
 8002c0a:	e7ca      	b.n	8002ba2 <_free_r+0x26>
 8002c0c:	b003      	add	sp, #12
 8002c0e:	bd30      	pop	{r4, r5, pc}
 8002c10:	2000021c 	.word	0x2000021c

08002c14 <sbrk_aligned>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4e0e      	ldr	r6, [pc, #56]	; (8002c50 <sbrk_aligned+0x3c>)
 8002c18:	460c      	mov	r4, r1
 8002c1a:	6831      	ldr	r1, [r6, #0]
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	b911      	cbnz	r1, 8002c26 <sbrk_aligned+0x12>
 8002c20:	f000 fba6 	bl	8003370 <_sbrk_r>
 8002c24:	6030      	str	r0, [r6, #0]
 8002c26:	4621      	mov	r1, r4
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f000 fba1 	bl	8003370 <_sbrk_r>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	d00a      	beq.n	8002c48 <sbrk_aligned+0x34>
 8002c32:	1cc4      	adds	r4, r0, #3
 8002c34:	f024 0403 	bic.w	r4, r4, #3
 8002c38:	42a0      	cmp	r0, r4
 8002c3a:	d007      	beq.n	8002c4c <sbrk_aligned+0x38>
 8002c3c:	1a21      	subs	r1, r4, r0
 8002c3e:	4628      	mov	r0, r5
 8002c40:	f000 fb96 	bl	8003370 <_sbrk_r>
 8002c44:	3001      	adds	r0, #1
 8002c46:	d101      	bne.n	8002c4c <sbrk_aligned+0x38>
 8002c48:	f04f 34ff 	mov.w	r4, #4294967295
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	20000220 	.word	0x20000220

08002c54 <_malloc_r>:
 8002c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c58:	1ccd      	adds	r5, r1, #3
 8002c5a:	f025 0503 	bic.w	r5, r5, #3
 8002c5e:	3508      	adds	r5, #8
 8002c60:	2d0c      	cmp	r5, #12
 8002c62:	bf38      	it	cc
 8002c64:	250c      	movcc	r5, #12
 8002c66:	2d00      	cmp	r5, #0
 8002c68:	4607      	mov	r7, r0
 8002c6a:	db01      	blt.n	8002c70 <_malloc_r+0x1c>
 8002c6c:	42a9      	cmp	r1, r5
 8002c6e:	d905      	bls.n	8002c7c <_malloc_r+0x28>
 8002c70:	230c      	movs	r3, #12
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	2600      	movs	r6, #0
 8002c76:	4630      	mov	r0, r6
 8002c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d50 <_malloc_r+0xfc>
 8002c80:	f000 f868 	bl	8002d54 <__malloc_lock>
 8002c84:	f8d8 3000 	ldr.w	r3, [r8]
 8002c88:	461c      	mov	r4, r3
 8002c8a:	bb5c      	cbnz	r4, 8002ce4 <_malloc_r+0x90>
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	4638      	mov	r0, r7
 8002c90:	f7ff ffc0 	bl	8002c14 <sbrk_aligned>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	4604      	mov	r4, r0
 8002c98:	d155      	bne.n	8002d46 <_malloc_r+0xf2>
 8002c9a:	f8d8 4000 	ldr.w	r4, [r8]
 8002c9e:	4626      	mov	r6, r4
 8002ca0:	2e00      	cmp	r6, #0
 8002ca2:	d145      	bne.n	8002d30 <_malloc_r+0xdc>
 8002ca4:	2c00      	cmp	r4, #0
 8002ca6:	d048      	beq.n	8002d3a <_malloc_r+0xe6>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	4631      	mov	r1, r6
 8002cac:	4638      	mov	r0, r7
 8002cae:	eb04 0903 	add.w	r9, r4, r3
 8002cb2:	f000 fb5d 	bl	8003370 <_sbrk_r>
 8002cb6:	4581      	cmp	r9, r0
 8002cb8:	d13f      	bne.n	8002d3a <_malloc_r+0xe6>
 8002cba:	6821      	ldr	r1, [r4, #0]
 8002cbc:	1a6d      	subs	r5, r5, r1
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	f7ff ffa7 	bl	8002c14 <sbrk_aligned>
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	d037      	beq.n	8002d3a <_malloc_r+0xe6>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	442b      	add	r3, r5
 8002cce:	6023      	str	r3, [r4, #0]
 8002cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d038      	beq.n	8002d4a <_malloc_r+0xf6>
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	42a2      	cmp	r2, r4
 8002cdc:	d12b      	bne.n	8002d36 <_malloc_r+0xe2>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e00f      	b.n	8002d04 <_malloc_r+0xb0>
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	1b52      	subs	r2, r2, r5
 8002ce8:	d41f      	bmi.n	8002d2a <_malloc_r+0xd6>
 8002cea:	2a0b      	cmp	r2, #11
 8002cec:	d917      	bls.n	8002d1e <_malloc_r+0xca>
 8002cee:	1961      	adds	r1, r4, r5
 8002cf0:	42a3      	cmp	r3, r4
 8002cf2:	6025      	str	r5, [r4, #0]
 8002cf4:	bf18      	it	ne
 8002cf6:	6059      	strne	r1, [r3, #4]
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	bf08      	it	eq
 8002cfc:	f8c8 1000 	streq.w	r1, [r8]
 8002d00:	5162      	str	r2, [r4, r5]
 8002d02:	604b      	str	r3, [r1, #4]
 8002d04:	4638      	mov	r0, r7
 8002d06:	f104 060b 	add.w	r6, r4, #11
 8002d0a:	f000 f829 	bl	8002d60 <__malloc_unlock>
 8002d0e:	f026 0607 	bic.w	r6, r6, #7
 8002d12:	1d23      	adds	r3, r4, #4
 8002d14:	1af2      	subs	r2, r6, r3
 8002d16:	d0ae      	beq.n	8002c76 <_malloc_r+0x22>
 8002d18:	1b9b      	subs	r3, r3, r6
 8002d1a:	50a3      	str	r3, [r4, r2]
 8002d1c:	e7ab      	b.n	8002c76 <_malloc_r+0x22>
 8002d1e:	42a3      	cmp	r3, r4
 8002d20:	6862      	ldr	r2, [r4, #4]
 8002d22:	d1dd      	bne.n	8002ce0 <_malloc_r+0x8c>
 8002d24:	f8c8 2000 	str.w	r2, [r8]
 8002d28:	e7ec      	b.n	8002d04 <_malloc_r+0xb0>
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	6864      	ldr	r4, [r4, #4]
 8002d2e:	e7ac      	b.n	8002c8a <_malloc_r+0x36>
 8002d30:	4634      	mov	r4, r6
 8002d32:	6876      	ldr	r6, [r6, #4]
 8002d34:	e7b4      	b.n	8002ca0 <_malloc_r+0x4c>
 8002d36:	4613      	mov	r3, r2
 8002d38:	e7cc      	b.n	8002cd4 <_malloc_r+0x80>
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4638      	mov	r0, r7
 8002d40:	f000 f80e 	bl	8002d60 <__malloc_unlock>
 8002d44:	e797      	b.n	8002c76 <_malloc_r+0x22>
 8002d46:	6025      	str	r5, [r4, #0]
 8002d48:	e7dc      	b.n	8002d04 <_malloc_r+0xb0>
 8002d4a:	605b      	str	r3, [r3, #4]
 8002d4c:	deff      	udf	#255	; 0xff
 8002d4e:	bf00      	nop
 8002d50:	2000021c 	.word	0x2000021c

08002d54 <__malloc_lock>:
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <__malloc_lock+0x8>)
 8002d56:	f7ff bf0f 	b.w	8002b78 <__retarget_lock_acquire_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	20000218 	.word	0x20000218

08002d60 <__malloc_unlock>:
 8002d60:	4801      	ldr	r0, [pc, #4]	; (8002d68 <__malloc_unlock+0x8>)
 8002d62:	f7ff bf0a 	b.w	8002b7a <__retarget_lock_release_recursive>
 8002d66:	bf00      	nop
 8002d68:	20000218 	.word	0x20000218

08002d6c <__ssputs_r>:
 8002d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d70:	688e      	ldr	r6, [r1, #8]
 8002d72:	461f      	mov	r7, r3
 8002d74:	42be      	cmp	r6, r7
 8002d76:	680b      	ldr	r3, [r1, #0]
 8002d78:	4682      	mov	sl, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4690      	mov	r8, r2
 8002d7e:	d82c      	bhi.n	8002dda <__ssputs_r+0x6e>
 8002d80:	898a      	ldrh	r2, [r1, #12]
 8002d82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d86:	d026      	beq.n	8002dd6 <__ssputs_r+0x6a>
 8002d88:	6965      	ldr	r5, [r4, #20]
 8002d8a:	6909      	ldr	r1, [r1, #16]
 8002d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d90:	eba3 0901 	sub.w	r9, r3, r1
 8002d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d98:	1c7b      	adds	r3, r7, #1
 8002d9a:	444b      	add	r3, r9
 8002d9c:	106d      	asrs	r5, r5, #1
 8002d9e:	429d      	cmp	r5, r3
 8002da0:	bf38      	it	cc
 8002da2:	461d      	movcc	r5, r3
 8002da4:	0553      	lsls	r3, r2, #21
 8002da6:	d527      	bpl.n	8002df8 <__ssputs_r+0x8c>
 8002da8:	4629      	mov	r1, r5
 8002daa:	f7ff ff53 	bl	8002c54 <_malloc_r>
 8002dae:	4606      	mov	r6, r0
 8002db0:	b360      	cbz	r0, 8002e0c <__ssputs_r+0xa0>
 8002db2:	6921      	ldr	r1, [r4, #16]
 8002db4:	464a      	mov	r2, r9
 8002db6:	f000 faeb 	bl	8003390 <memcpy>
 8002dba:	89a3      	ldrh	r3, [r4, #12]
 8002dbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	81a3      	strh	r3, [r4, #12]
 8002dc6:	6126      	str	r6, [r4, #16]
 8002dc8:	6165      	str	r5, [r4, #20]
 8002dca:	444e      	add	r6, r9
 8002dcc:	eba5 0509 	sub.w	r5, r5, r9
 8002dd0:	6026      	str	r6, [r4, #0]
 8002dd2:	60a5      	str	r5, [r4, #8]
 8002dd4:	463e      	mov	r6, r7
 8002dd6:	42be      	cmp	r6, r7
 8002dd8:	d900      	bls.n	8002ddc <__ssputs_r+0x70>
 8002dda:	463e      	mov	r6, r7
 8002ddc:	6820      	ldr	r0, [r4, #0]
 8002dde:	4632      	mov	r2, r6
 8002de0:	4641      	mov	r1, r8
 8002de2:	f000 faab 	bl	800333c <memmove>
 8002de6:	68a3      	ldr	r3, [r4, #8]
 8002de8:	1b9b      	subs	r3, r3, r6
 8002dea:	60a3      	str	r3, [r4, #8]
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	4433      	add	r3, r6
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	2000      	movs	r0, #0
 8002df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df8:	462a      	mov	r2, r5
 8002dfa:	f000 fad7 	bl	80033ac <_realloc_r>
 8002dfe:	4606      	mov	r6, r0
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d1e0      	bne.n	8002dc6 <__ssputs_r+0x5a>
 8002e04:	6921      	ldr	r1, [r4, #16]
 8002e06:	4650      	mov	r0, sl
 8002e08:	f7ff feb8 	bl	8002b7c <_free_r>
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	f8ca 3000 	str.w	r3, [sl]
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e18:	81a3      	strh	r3, [r4, #12]
 8002e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1e:	e7e9      	b.n	8002df4 <__ssputs_r+0x88>

08002e20 <_svfiprintf_r>:
 8002e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e24:	4698      	mov	r8, r3
 8002e26:	898b      	ldrh	r3, [r1, #12]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	b09d      	sub	sp, #116	; 0x74
 8002e2c:	4607      	mov	r7, r0
 8002e2e:	460d      	mov	r5, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	d50e      	bpl.n	8002e52 <_svfiprintf_r+0x32>
 8002e34:	690b      	ldr	r3, [r1, #16]
 8002e36:	b963      	cbnz	r3, 8002e52 <_svfiprintf_r+0x32>
 8002e38:	2140      	movs	r1, #64	; 0x40
 8002e3a:	f7ff ff0b 	bl	8002c54 <_malloc_r>
 8002e3e:	6028      	str	r0, [r5, #0]
 8002e40:	6128      	str	r0, [r5, #16]
 8002e42:	b920      	cbnz	r0, 8002e4e <_svfiprintf_r+0x2e>
 8002e44:	230c      	movs	r3, #12
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	e0d0      	b.n	8002ff0 <_svfiprintf_r+0x1d0>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	616b      	str	r3, [r5, #20]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9309      	str	r3, [sp, #36]	; 0x24
 8002e56:	2320      	movs	r3, #32
 8002e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e60:	2330      	movs	r3, #48	; 0x30
 8002e62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003008 <_svfiprintf_r+0x1e8>
 8002e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e6a:	f04f 0901 	mov.w	r9, #1
 8002e6e:	4623      	mov	r3, r4
 8002e70:	469a      	mov	sl, r3
 8002e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e76:	b10a      	cbz	r2, 8002e7c <_svfiprintf_r+0x5c>
 8002e78:	2a25      	cmp	r2, #37	; 0x25
 8002e7a:	d1f9      	bne.n	8002e70 <_svfiprintf_r+0x50>
 8002e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e80:	d00b      	beq.n	8002e9a <_svfiprintf_r+0x7a>
 8002e82:	465b      	mov	r3, fp
 8002e84:	4622      	mov	r2, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	4638      	mov	r0, r7
 8002e8a:	f7ff ff6f 	bl	8002d6c <__ssputs_r>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	f000 80a9 	beq.w	8002fe6 <_svfiprintf_r+0x1c6>
 8002e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e96:	445a      	add	r2, fp
 8002e98:	9209      	str	r2, [sp, #36]	; 0x24
 8002e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80a1 	beq.w	8002fe6 <_svfiprintf_r+0x1c6>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eae:	f10a 0a01 	add.w	sl, sl, #1
 8002eb2:	9304      	str	r3, [sp, #16]
 8002eb4:	9307      	str	r3, [sp, #28]
 8002eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eba:	931a      	str	r3, [sp, #104]	; 0x68
 8002ebc:	4654      	mov	r4, sl
 8002ebe:	2205      	movs	r2, #5
 8002ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec4:	4850      	ldr	r0, [pc, #320]	; (8003008 <_svfiprintf_r+0x1e8>)
 8002ec6:	f7fd f98b 	bl	80001e0 <memchr>
 8002eca:	9a04      	ldr	r2, [sp, #16]
 8002ecc:	b9d8      	cbnz	r0, 8002f06 <_svfiprintf_r+0xe6>
 8002ece:	06d0      	lsls	r0, r2, #27
 8002ed0:	bf44      	itt	mi
 8002ed2:	2320      	movmi	r3, #32
 8002ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ed8:	0711      	lsls	r1, r2, #28
 8002eda:	bf44      	itt	mi
 8002edc:	232b      	movmi	r3, #43	; 0x2b
 8002ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee8:	d015      	beq.n	8002f16 <_svfiprintf_r+0xf6>
 8002eea:	9a07      	ldr	r2, [sp, #28]
 8002eec:	4654      	mov	r4, sl
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f04f 0c0a 	mov.w	ip, #10
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002efa:	3b30      	subs	r3, #48	; 0x30
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d94d      	bls.n	8002f9c <_svfiprintf_r+0x17c>
 8002f00:	b1b0      	cbz	r0, 8002f30 <_svfiprintf_r+0x110>
 8002f02:	9207      	str	r2, [sp, #28]
 8002f04:	e014      	b.n	8002f30 <_svfiprintf_r+0x110>
 8002f06:	eba0 0308 	sub.w	r3, r0, r8
 8002f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	9304      	str	r3, [sp, #16]
 8002f12:	46a2      	mov	sl, r4
 8002f14:	e7d2      	b.n	8002ebc <_svfiprintf_r+0x9c>
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	1d19      	adds	r1, r3, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	9103      	str	r1, [sp, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bfbb      	ittet	lt
 8002f22:	425b      	neglt	r3, r3
 8002f24:	f042 0202 	orrlt.w	r2, r2, #2
 8002f28:	9307      	strge	r3, [sp, #28]
 8002f2a:	9307      	strlt	r3, [sp, #28]
 8002f2c:	bfb8      	it	lt
 8002f2e:	9204      	strlt	r2, [sp, #16]
 8002f30:	7823      	ldrb	r3, [r4, #0]
 8002f32:	2b2e      	cmp	r3, #46	; 0x2e
 8002f34:	d10c      	bne.n	8002f50 <_svfiprintf_r+0x130>
 8002f36:	7863      	ldrb	r3, [r4, #1]
 8002f38:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3a:	d134      	bne.n	8002fa6 <_svfiprintf_r+0x186>
 8002f3c:	9b03      	ldr	r3, [sp, #12]
 8002f3e:	1d1a      	adds	r2, r3, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	9203      	str	r2, [sp, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bfb8      	it	lt
 8002f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f4c:	3402      	adds	r4, #2
 8002f4e:	9305      	str	r3, [sp, #20]
 8002f50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003018 <_svfiprintf_r+0x1f8>
 8002f54:	7821      	ldrb	r1, [r4, #0]
 8002f56:	2203      	movs	r2, #3
 8002f58:	4650      	mov	r0, sl
 8002f5a:	f7fd f941 	bl	80001e0 <memchr>
 8002f5e:	b138      	cbz	r0, 8002f70 <_svfiprintf_r+0x150>
 8002f60:	9b04      	ldr	r3, [sp, #16]
 8002f62:	eba0 000a 	sub.w	r0, r0, sl
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	4082      	lsls	r2, r0
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	3401      	adds	r4, #1
 8002f6e:	9304      	str	r3, [sp, #16]
 8002f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f74:	4825      	ldr	r0, [pc, #148]	; (800300c <_svfiprintf_r+0x1ec>)
 8002f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	f7fd f930 	bl	80001e0 <memchr>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d038      	beq.n	8002ff6 <_svfiprintf_r+0x1d6>
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <_svfiprintf_r+0x1f0>)
 8002f86:	bb1b      	cbnz	r3, 8002fd0 <_svfiprintf_r+0x1b0>
 8002f88:	9b03      	ldr	r3, [sp, #12]
 8002f8a:	3307      	adds	r3, #7
 8002f8c:	f023 0307 	bic.w	r3, r3, #7
 8002f90:	3308      	adds	r3, #8
 8002f92:	9303      	str	r3, [sp, #12]
 8002f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f96:	4433      	add	r3, r6
 8002f98:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9a:	e768      	b.n	8002e6e <_svfiprintf_r+0x4e>
 8002f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e7a6      	b.n	8002ef4 <_svfiprintf_r+0xd4>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	3401      	adds	r4, #1
 8002faa:	9305      	str	r3, [sp, #20]
 8002fac:	4619      	mov	r1, r3
 8002fae:	f04f 0c0a 	mov.w	ip, #10
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fb8:	3a30      	subs	r2, #48	; 0x30
 8002fba:	2a09      	cmp	r2, #9
 8002fbc:	d903      	bls.n	8002fc6 <_svfiprintf_r+0x1a6>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0c6      	beq.n	8002f50 <_svfiprintf_r+0x130>
 8002fc2:	9105      	str	r1, [sp, #20]
 8002fc4:	e7c4      	b.n	8002f50 <_svfiprintf_r+0x130>
 8002fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fca:	4604      	mov	r4, r0
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e7f0      	b.n	8002fb2 <_svfiprintf_r+0x192>
 8002fd0:	ab03      	add	r3, sp, #12
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	462a      	mov	r2, r5
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <_svfiprintf_r+0x1f4>)
 8002fd8:	a904      	add	r1, sp, #16
 8002fda:	4638      	mov	r0, r7
 8002fdc:	f3af 8000 	nop.w
 8002fe0:	1c42      	adds	r2, r0, #1
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	d1d6      	bne.n	8002f94 <_svfiprintf_r+0x174>
 8002fe6:	89ab      	ldrh	r3, [r5, #12]
 8002fe8:	065b      	lsls	r3, r3, #25
 8002fea:	f53f af2d 	bmi.w	8002e48 <_svfiprintf_r+0x28>
 8002fee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ff0:	b01d      	add	sp, #116	; 0x74
 8002ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff6:	ab03      	add	r3, sp, #12
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <_svfiprintf_r+0x1f4>)
 8002ffe:	a904      	add	r1, sp, #16
 8003000:	4638      	mov	r0, r7
 8003002:	f000 f879 	bl	80030f8 <_printf_i>
 8003006:	e7eb      	b.n	8002fe0 <_svfiprintf_r+0x1c0>
 8003008:	08003470 	.word	0x08003470
 800300c:	0800347a 	.word	0x0800347a
 8003010:	00000000 	.word	0x00000000
 8003014:	08002d6d 	.word	0x08002d6d
 8003018:	08003476 	.word	0x08003476

0800301c <_printf_common>:
 800301c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003020:	4616      	mov	r6, r2
 8003022:	4699      	mov	r9, r3
 8003024:	688a      	ldr	r2, [r1, #8]
 8003026:	690b      	ldr	r3, [r1, #16]
 8003028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800302c:	4293      	cmp	r3, r2
 800302e:	bfb8      	it	lt
 8003030:	4613      	movlt	r3, r2
 8003032:	6033      	str	r3, [r6, #0]
 8003034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003038:	4607      	mov	r7, r0
 800303a:	460c      	mov	r4, r1
 800303c:	b10a      	cbz	r2, 8003042 <_printf_common+0x26>
 800303e:	3301      	adds	r3, #1
 8003040:	6033      	str	r3, [r6, #0]
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	0699      	lsls	r1, r3, #26
 8003046:	bf42      	ittt	mi
 8003048:	6833      	ldrmi	r3, [r6, #0]
 800304a:	3302      	addmi	r3, #2
 800304c:	6033      	strmi	r3, [r6, #0]
 800304e:	6825      	ldr	r5, [r4, #0]
 8003050:	f015 0506 	ands.w	r5, r5, #6
 8003054:	d106      	bne.n	8003064 <_printf_common+0x48>
 8003056:	f104 0a19 	add.w	sl, r4, #25
 800305a:	68e3      	ldr	r3, [r4, #12]
 800305c:	6832      	ldr	r2, [r6, #0]
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	42ab      	cmp	r3, r5
 8003062:	dc26      	bgt.n	80030b2 <_printf_common+0x96>
 8003064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003068:	1e13      	subs	r3, r2, #0
 800306a:	6822      	ldr	r2, [r4, #0]
 800306c:	bf18      	it	ne
 800306e:	2301      	movne	r3, #1
 8003070:	0692      	lsls	r2, r2, #26
 8003072:	d42b      	bmi.n	80030cc <_printf_common+0xb0>
 8003074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003078:	4649      	mov	r1, r9
 800307a:	4638      	mov	r0, r7
 800307c:	47c0      	blx	r8
 800307e:	3001      	adds	r0, #1
 8003080:	d01e      	beq.n	80030c0 <_printf_common+0xa4>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	6922      	ldr	r2, [r4, #16]
 8003086:	f003 0306 	and.w	r3, r3, #6
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf02      	ittt	eq
 800308e:	68e5      	ldreq	r5, [r4, #12]
 8003090:	6833      	ldreq	r3, [r6, #0]
 8003092:	1aed      	subeq	r5, r5, r3
 8003094:	68a3      	ldr	r3, [r4, #8]
 8003096:	bf0c      	ite	eq
 8003098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800309c:	2500      	movne	r5, #0
 800309e:	4293      	cmp	r3, r2
 80030a0:	bfc4      	itt	gt
 80030a2:	1a9b      	subgt	r3, r3, r2
 80030a4:	18ed      	addgt	r5, r5, r3
 80030a6:	2600      	movs	r6, #0
 80030a8:	341a      	adds	r4, #26
 80030aa:	42b5      	cmp	r5, r6
 80030ac:	d11a      	bne.n	80030e4 <_printf_common+0xc8>
 80030ae:	2000      	movs	r0, #0
 80030b0:	e008      	b.n	80030c4 <_printf_common+0xa8>
 80030b2:	2301      	movs	r3, #1
 80030b4:	4652      	mov	r2, sl
 80030b6:	4649      	mov	r1, r9
 80030b8:	4638      	mov	r0, r7
 80030ba:	47c0      	blx	r8
 80030bc:	3001      	adds	r0, #1
 80030be:	d103      	bne.n	80030c8 <_printf_common+0xac>
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c8:	3501      	adds	r5, #1
 80030ca:	e7c6      	b.n	800305a <_printf_common+0x3e>
 80030cc:	18e1      	adds	r1, r4, r3
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	2030      	movs	r0, #48	; 0x30
 80030d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030d6:	4422      	add	r2, r4
 80030d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030e0:	3302      	adds	r3, #2
 80030e2:	e7c7      	b.n	8003074 <_printf_common+0x58>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4622      	mov	r2, r4
 80030e8:	4649      	mov	r1, r9
 80030ea:	4638      	mov	r0, r7
 80030ec:	47c0      	blx	r8
 80030ee:	3001      	adds	r0, #1
 80030f0:	d0e6      	beq.n	80030c0 <_printf_common+0xa4>
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7d9      	b.n	80030aa <_printf_common+0x8e>
	...

080030f8 <_printf_i>:
 80030f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030fc:	7e0f      	ldrb	r7, [r1, #24]
 80030fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003100:	2f78      	cmp	r7, #120	; 0x78
 8003102:	4691      	mov	r9, r2
 8003104:	4680      	mov	r8, r0
 8003106:	460c      	mov	r4, r1
 8003108:	469a      	mov	sl, r3
 800310a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800310e:	d807      	bhi.n	8003120 <_printf_i+0x28>
 8003110:	2f62      	cmp	r7, #98	; 0x62
 8003112:	d80a      	bhi.n	800312a <_printf_i+0x32>
 8003114:	2f00      	cmp	r7, #0
 8003116:	f000 80d4 	beq.w	80032c2 <_printf_i+0x1ca>
 800311a:	2f58      	cmp	r7, #88	; 0x58
 800311c:	f000 80c0 	beq.w	80032a0 <_printf_i+0x1a8>
 8003120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003128:	e03a      	b.n	80031a0 <_printf_i+0xa8>
 800312a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800312e:	2b15      	cmp	r3, #21
 8003130:	d8f6      	bhi.n	8003120 <_printf_i+0x28>
 8003132:	a101      	add	r1, pc, #4	; (adr r1, 8003138 <_printf_i+0x40>)
 8003134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003138:	08003191 	.word	0x08003191
 800313c:	080031a5 	.word	0x080031a5
 8003140:	08003121 	.word	0x08003121
 8003144:	08003121 	.word	0x08003121
 8003148:	08003121 	.word	0x08003121
 800314c:	08003121 	.word	0x08003121
 8003150:	080031a5 	.word	0x080031a5
 8003154:	08003121 	.word	0x08003121
 8003158:	08003121 	.word	0x08003121
 800315c:	08003121 	.word	0x08003121
 8003160:	08003121 	.word	0x08003121
 8003164:	080032a9 	.word	0x080032a9
 8003168:	080031d1 	.word	0x080031d1
 800316c:	08003263 	.word	0x08003263
 8003170:	08003121 	.word	0x08003121
 8003174:	08003121 	.word	0x08003121
 8003178:	080032cb 	.word	0x080032cb
 800317c:	08003121 	.word	0x08003121
 8003180:	080031d1 	.word	0x080031d1
 8003184:	08003121 	.word	0x08003121
 8003188:	08003121 	.word	0x08003121
 800318c:	0800326b 	.word	0x0800326b
 8003190:	682b      	ldr	r3, [r5, #0]
 8003192:	1d1a      	adds	r2, r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	602a      	str	r2, [r5, #0]
 8003198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800319c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031a0:	2301      	movs	r3, #1
 80031a2:	e09f      	b.n	80032e4 <_printf_i+0x1ec>
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	682b      	ldr	r3, [r5, #0]
 80031a8:	0607      	lsls	r7, r0, #24
 80031aa:	f103 0104 	add.w	r1, r3, #4
 80031ae:	6029      	str	r1, [r5, #0]
 80031b0:	d501      	bpl.n	80031b6 <_printf_i+0xbe>
 80031b2:	681e      	ldr	r6, [r3, #0]
 80031b4:	e003      	b.n	80031be <_printf_i+0xc6>
 80031b6:	0646      	lsls	r6, r0, #25
 80031b8:	d5fb      	bpl.n	80031b2 <_printf_i+0xba>
 80031ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80031be:	2e00      	cmp	r6, #0
 80031c0:	da03      	bge.n	80031ca <_printf_i+0xd2>
 80031c2:	232d      	movs	r3, #45	; 0x2d
 80031c4:	4276      	negs	r6, r6
 80031c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ca:	485a      	ldr	r0, [pc, #360]	; (8003334 <_printf_i+0x23c>)
 80031cc:	230a      	movs	r3, #10
 80031ce:	e012      	b.n	80031f6 <_printf_i+0xfe>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	1d19      	adds	r1, r3, #4
 80031d6:	6029      	str	r1, [r5, #0]
 80031d8:	0605      	lsls	r5, r0, #24
 80031da:	d501      	bpl.n	80031e0 <_printf_i+0xe8>
 80031dc:	681e      	ldr	r6, [r3, #0]
 80031de:	e002      	b.n	80031e6 <_printf_i+0xee>
 80031e0:	0641      	lsls	r1, r0, #25
 80031e2:	d5fb      	bpl.n	80031dc <_printf_i+0xe4>
 80031e4:	881e      	ldrh	r6, [r3, #0]
 80031e6:	4853      	ldr	r0, [pc, #332]	; (8003334 <_printf_i+0x23c>)
 80031e8:	2f6f      	cmp	r7, #111	; 0x6f
 80031ea:	bf0c      	ite	eq
 80031ec:	2308      	moveq	r3, #8
 80031ee:	230a      	movne	r3, #10
 80031f0:	2100      	movs	r1, #0
 80031f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031f6:	6865      	ldr	r5, [r4, #4]
 80031f8:	60a5      	str	r5, [r4, #8]
 80031fa:	2d00      	cmp	r5, #0
 80031fc:	bfa2      	ittt	ge
 80031fe:	6821      	ldrge	r1, [r4, #0]
 8003200:	f021 0104 	bicge.w	r1, r1, #4
 8003204:	6021      	strge	r1, [r4, #0]
 8003206:	b90e      	cbnz	r6, 800320c <_printf_i+0x114>
 8003208:	2d00      	cmp	r5, #0
 800320a:	d04b      	beq.n	80032a4 <_printf_i+0x1ac>
 800320c:	4615      	mov	r5, r2
 800320e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003212:	fb03 6711 	mls	r7, r3, r1, r6
 8003216:	5dc7      	ldrb	r7, [r0, r7]
 8003218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800321c:	4637      	mov	r7, r6
 800321e:	42bb      	cmp	r3, r7
 8003220:	460e      	mov	r6, r1
 8003222:	d9f4      	bls.n	800320e <_printf_i+0x116>
 8003224:	2b08      	cmp	r3, #8
 8003226:	d10b      	bne.n	8003240 <_printf_i+0x148>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	07de      	lsls	r6, r3, #31
 800322c:	d508      	bpl.n	8003240 <_printf_i+0x148>
 800322e:	6923      	ldr	r3, [r4, #16]
 8003230:	6861      	ldr	r1, [r4, #4]
 8003232:	4299      	cmp	r1, r3
 8003234:	bfde      	ittt	le
 8003236:	2330      	movle	r3, #48	; 0x30
 8003238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800323c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003240:	1b52      	subs	r2, r2, r5
 8003242:	6122      	str	r2, [r4, #16]
 8003244:	f8cd a000 	str.w	sl, [sp]
 8003248:	464b      	mov	r3, r9
 800324a:	aa03      	add	r2, sp, #12
 800324c:	4621      	mov	r1, r4
 800324e:	4640      	mov	r0, r8
 8003250:	f7ff fee4 	bl	800301c <_printf_common>
 8003254:	3001      	adds	r0, #1
 8003256:	d14a      	bne.n	80032ee <_printf_i+0x1f6>
 8003258:	f04f 30ff 	mov.w	r0, #4294967295
 800325c:	b004      	add	sp, #16
 800325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	4833      	ldr	r0, [pc, #204]	; (8003338 <_printf_i+0x240>)
 800326c:	2778      	movs	r7, #120	; 0x78
 800326e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	6829      	ldr	r1, [r5, #0]
 8003276:	061f      	lsls	r7, r3, #24
 8003278:	f851 6b04 	ldr.w	r6, [r1], #4
 800327c:	d402      	bmi.n	8003284 <_printf_i+0x18c>
 800327e:	065f      	lsls	r7, r3, #25
 8003280:	bf48      	it	mi
 8003282:	b2b6      	uxthmi	r6, r6
 8003284:	07df      	lsls	r7, r3, #31
 8003286:	bf48      	it	mi
 8003288:	f043 0320 	orrmi.w	r3, r3, #32
 800328c:	6029      	str	r1, [r5, #0]
 800328e:	bf48      	it	mi
 8003290:	6023      	strmi	r3, [r4, #0]
 8003292:	b91e      	cbnz	r6, 800329c <_printf_i+0x1a4>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	f023 0320 	bic.w	r3, r3, #32
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	2310      	movs	r3, #16
 800329e:	e7a7      	b.n	80031f0 <_printf_i+0xf8>
 80032a0:	4824      	ldr	r0, [pc, #144]	; (8003334 <_printf_i+0x23c>)
 80032a2:	e7e4      	b.n	800326e <_printf_i+0x176>
 80032a4:	4615      	mov	r5, r2
 80032a6:	e7bd      	b.n	8003224 <_printf_i+0x12c>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	6826      	ldr	r6, [r4, #0]
 80032ac:	6961      	ldr	r1, [r4, #20]
 80032ae:	1d18      	adds	r0, r3, #4
 80032b0:	6028      	str	r0, [r5, #0]
 80032b2:	0635      	lsls	r5, r6, #24
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	d501      	bpl.n	80032bc <_printf_i+0x1c4>
 80032b8:	6019      	str	r1, [r3, #0]
 80032ba:	e002      	b.n	80032c2 <_printf_i+0x1ca>
 80032bc:	0670      	lsls	r0, r6, #25
 80032be:	d5fb      	bpl.n	80032b8 <_printf_i+0x1c0>
 80032c0:	8019      	strh	r1, [r3, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	6123      	str	r3, [r4, #16]
 80032c6:	4615      	mov	r5, r2
 80032c8:	e7bc      	b.n	8003244 <_printf_i+0x14c>
 80032ca:	682b      	ldr	r3, [r5, #0]
 80032cc:	1d1a      	adds	r2, r3, #4
 80032ce:	602a      	str	r2, [r5, #0]
 80032d0:	681d      	ldr	r5, [r3, #0]
 80032d2:	6862      	ldr	r2, [r4, #4]
 80032d4:	2100      	movs	r1, #0
 80032d6:	4628      	mov	r0, r5
 80032d8:	f7fc ff82 	bl	80001e0 <memchr>
 80032dc:	b108      	cbz	r0, 80032e2 <_printf_i+0x1ea>
 80032de:	1b40      	subs	r0, r0, r5
 80032e0:	6060      	str	r0, [r4, #4]
 80032e2:	6863      	ldr	r3, [r4, #4]
 80032e4:	6123      	str	r3, [r4, #16]
 80032e6:	2300      	movs	r3, #0
 80032e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ec:	e7aa      	b.n	8003244 <_printf_i+0x14c>
 80032ee:	6923      	ldr	r3, [r4, #16]
 80032f0:	462a      	mov	r2, r5
 80032f2:	4649      	mov	r1, r9
 80032f4:	4640      	mov	r0, r8
 80032f6:	47d0      	blx	sl
 80032f8:	3001      	adds	r0, #1
 80032fa:	d0ad      	beq.n	8003258 <_printf_i+0x160>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	079b      	lsls	r3, r3, #30
 8003300:	d413      	bmi.n	800332a <_printf_i+0x232>
 8003302:	68e0      	ldr	r0, [r4, #12]
 8003304:	9b03      	ldr	r3, [sp, #12]
 8003306:	4298      	cmp	r0, r3
 8003308:	bfb8      	it	lt
 800330a:	4618      	movlt	r0, r3
 800330c:	e7a6      	b.n	800325c <_printf_i+0x164>
 800330e:	2301      	movs	r3, #1
 8003310:	4632      	mov	r2, r6
 8003312:	4649      	mov	r1, r9
 8003314:	4640      	mov	r0, r8
 8003316:	47d0      	blx	sl
 8003318:	3001      	adds	r0, #1
 800331a:	d09d      	beq.n	8003258 <_printf_i+0x160>
 800331c:	3501      	adds	r5, #1
 800331e:	68e3      	ldr	r3, [r4, #12]
 8003320:	9903      	ldr	r1, [sp, #12]
 8003322:	1a5b      	subs	r3, r3, r1
 8003324:	42ab      	cmp	r3, r5
 8003326:	dcf2      	bgt.n	800330e <_printf_i+0x216>
 8003328:	e7eb      	b.n	8003302 <_printf_i+0x20a>
 800332a:	2500      	movs	r5, #0
 800332c:	f104 0619 	add.w	r6, r4, #25
 8003330:	e7f5      	b.n	800331e <_printf_i+0x226>
 8003332:	bf00      	nop
 8003334:	08003481 	.word	0x08003481
 8003338:	08003492 	.word	0x08003492

0800333c <memmove>:
 800333c:	4288      	cmp	r0, r1
 800333e:	b510      	push	{r4, lr}
 8003340:	eb01 0402 	add.w	r4, r1, r2
 8003344:	d902      	bls.n	800334c <memmove+0x10>
 8003346:	4284      	cmp	r4, r0
 8003348:	4623      	mov	r3, r4
 800334a:	d807      	bhi.n	800335c <memmove+0x20>
 800334c:	1e43      	subs	r3, r0, #1
 800334e:	42a1      	cmp	r1, r4
 8003350:	d008      	beq.n	8003364 <memmove+0x28>
 8003352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800335a:	e7f8      	b.n	800334e <memmove+0x12>
 800335c:	4402      	add	r2, r0
 800335e:	4601      	mov	r1, r0
 8003360:	428a      	cmp	r2, r1
 8003362:	d100      	bne.n	8003366 <memmove+0x2a>
 8003364:	bd10      	pop	{r4, pc}
 8003366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800336a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800336e:	e7f7      	b.n	8003360 <memmove+0x24>

08003370 <_sbrk_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4d06      	ldr	r5, [pc, #24]	; (800338c <_sbrk_r+0x1c>)
 8003374:	2300      	movs	r3, #0
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	f7fd fac8 	bl	8000910 <_sbrk>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_sbrk_r+0x1a>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_sbrk_r+0x1a>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20000214 	.word	0x20000214

08003390 <memcpy>:
 8003390:	440a      	add	r2, r1
 8003392:	4291      	cmp	r1, r2
 8003394:	f100 33ff 	add.w	r3, r0, #4294967295
 8003398:	d100      	bne.n	800339c <memcpy+0xc>
 800339a:	4770      	bx	lr
 800339c:	b510      	push	{r4, lr}
 800339e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a6:	4291      	cmp	r1, r2
 80033a8:	d1f9      	bne.n	800339e <memcpy+0xe>
 80033aa:	bd10      	pop	{r4, pc}

080033ac <_realloc_r>:
 80033ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b0:	4680      	mov	r8, r0
 80033b2:	4614      	mov	r4, r2
 80033b4:	460e      	mov	r6, r1
 80033b6:	b921      	cbnz	r1, 80033c2 <_realloc_r+0x16>
 80033b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033bc:	4611      	mov	r1, r2
 80033be:	f7ff bc49 	b.w	8002c54 <_malloc_r>
 80033c2:	b92a      	cbnz	r2, 80033d0 <_realloc_r+0x24>
 80033c4:	f7ff fbda 	bl	8002b7c <_free_r>
 80033c8:	4625      	mov	r5, r4
 80033ca:	4628      	mov	r0, r5
 80033cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033d0:	f000 f81b 	bl	800340a <_malloc_usable_size_r>
 80033d4:	4284      	cmp	r4, r0
 80033d6:	4607      	mov	r7, r0
 80033d8:	d802      	bhi.n	80033e0 <_realloc_r+0x34>
 80033da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033de:	d812      	bhi.n	8003406 <_realloc_r+0x5a>
 80033e0:	4621      	mov	r1, r4
 80033e2:	4640      	mov	r0, r8
 80033e4:	f7ff fc36 	bl	8002c54 <_malloc_r>
 80033e8:	4605      	mov	r5, r0
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d0ed      	beq.n	80033ca <_realloc_r+0x1e>
 80033ee:	42bc      	cmp	r4, r7
 80033f0:	4622      	mov	r2, r4
 80033f2:	4631      	mov	r1, r6
 80033f4:	bf28      	it	cs
 80033f6:	463a      	movcs	r2, r7
 80033f8:	f7ff ffca 	bl	8003390 <memcpy>
 80033fc:	4631      	mov	r1, r6
 80033fe:	4640      	mov	r0, r8
 8003400:	f7ff fbbc 	bl	8002b7c <_free_r>
 8003404:	e7e1      	b.n	80033ca <_realloc_r+0x1e>
 8003406:	4635      	mov	r5, r6
 8003408:	e7df      	b.n	80033ca <_realloc_r+0x1e>

0800340a <_malloc_usable_size_r>:
 800340a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800340e:	1f18      	subs	r0, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	bfbc      	itt	lt
 8003414:	580b      	ldrlt	r3, [r1, r0]
 8003416:	18c0      	addlt	r0, r0, r3
 8003418:	4770      	bx	lr
	...

0800341c <_init>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	bf00      	nop
 8003420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003422:	bc08      	pop	{r3}
 8003424:	469e      	mov	lr, r3
 8003426:	4770      	bx	lr

08003428 <_fini>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr
